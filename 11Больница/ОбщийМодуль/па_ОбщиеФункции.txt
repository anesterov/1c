#Если ТолстыйКлиентОбычноеПриложение Тогда
	
	// Определяет список подразделения стационара и параклиники,
	// по которым вводится ДоплатаСестрамЗаКатегорию
	Функция СписокПодразделений(Организация, Стационар = ложь, ЧасыСложные = ложь, ЧасыЗаРасширениеОбязанностей = ложь) экспорт
		
		Запрос = новый запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	па_СписокПодразделений.Подразделение
		|ИЗ
		|	РегистрСведений.па_СписокПодразделений КАК па_СписокПодразделений
		|ГДЕ
		|	па_СписокПодразделений.Организация = &Организация";
		
		Если Стационар Тогда
			Запрос.Текст = Запрос.Текст+"
			|	И па_СписокПодразделений.Стационар = ИСТИНА";
		ИначеЕсли ЧасыСложные Тогда
			Запрос.Текст = Запрос.Текст+"
			|	И па_СписокПодразделений.ЧасыСложные = ИСТИНА";
		ИначеЕсли ЧасыЗаРасширениеОбязанностей Тогда
			Запрос.Текст = Запрос.Текст+"
			|	И па_СписокПодразделений.ЧасыЗаРасширениеОбязанностей = ИСТИНА";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Организация",Организация);
		
		Попытка
			Результат = Запрос.Выполнить();
		Исключение
			Сообщить(ОписаниеОшибки());              
		КонецПопытки;
		
		Выборка = Результат.Выбрать();
		СпПодр = новый массив;
		Если Выборка.Количество()=0 Тогда
			Если Стационар Тогда
				Предупреждение("Нет ни одного подразделения стационара! Доплата за категорию медсестрам не может быть введена! Заполните Список подразделений стационара.");
			ИначеЕсли ЧасыСложные Тогда
				Предупреждение("Нет ни одного подразделения, у которого все часы сложные.");
			ИначеЕсли ЧасыЗаРасширениеОбязанностей Тогда
				Предупреждение("Нет ни одного подразделения, у которого все часы за расширение обязанностей.");
			КонецЕсли;
		Иначе	
			Пока Выборка.Следующий() Цикл
				СпПодр.Добавить(Выборка.Подразделение);
			КОнецЦикла;	
		КонецЕсли;	
		
		Возврат СпПодр;
		
	КонецФункции	
	
	// Определяет список специальных статей финансирования,
	// которые исключаются из расчета ДоплатыДоМРОТ
	Функция СписокСпецсчетов(Организация) экспорт
		
		Запрос = новый запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	па_СписокСпецсчетов.СпецСчет
		|ИЗ
		|	РегистрСведений.па_СписокСпецсчетов КАК па_СписокСпецсчетов
		|ГДЕ
		|	па_СписокСпецсчетов.Организация = &Организация";
		
		Запрос.УстановитьПараметр("Организация",Организация);
		
		Попытка
			Результат = Запрос.Выполнить();
		Исключение
			Сообщить(ОписаниеОшибки());              
		КонецПопытки;
		
		Выборка = Результат.Выбрать();
		СпСпецсчетов = новый массив;
		Если Выборка.Количество()=0 Тогда
			Предупреждение("Нет ни одного спецчета! Заполните Список спецсчетов. В расчет Компенсационной выплаты войдут все базовые начисления!");
		Иначе	
			Пока Выборка.Следующий() Цикл
				СпСпецсчетов.Добавить(Выборка.СпецСчет);
			КОнецЦикла;	
		КонецЕсли;	
		
		Возврат СпСпецсчетов;
		
	КонецФункции	
	
	Функция НастройкаРасчетаЗП(ДатаАкт,Организация) экспорт
		
		//Получим доплаты из РС.па_НастройкаРасчетаЗП
		
		Запрос = новый запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	па_НастройкаРасчетаЗПСрезПоследних.ДоплатаСестрамЗаКатегорию,
		|	па_НастройкаРасчетаЗПСрезПоследних.ДоплатаДоМРОТ,
		|	па_НастройкаРасчетаЗПСрезПоследних.ВыплатаЗаКачество,
		|	па_НастройкаРасчетаЗПСрезПоследних.ДоплатаЗаСложность,
		|	па_НастройкаРасчетаЗПСрезПоследних.ДоплатаЗаНочные,
		|	па_НастройкаРасчетаЗПСрезПоследних.ДоплатаЗаИнтенсивность,
		|	па_НастройкаРасчетаЗПСрезПоследних.ДоплатаПоИндКоэф,
		|	па_НастройкаРасчетаЗПСрезПоследних.ДоплатаЗаПроценты,
		|	па_НастройкаРасчетаЗПСрезПоследних.ДоплатаЗаДежурство,
		|	па_НастройкаРасчетаЗПСрезПоследних.ДоплатаЗаПраздничные,
		|	па_НастройкаРасчетаЗПСрезПоследних.ПроцентЗаСложность,
		|	па_НастройкаРасчетаЗПСрезПоследних.ПроцентНочных,
		|	па_НастройкаРасчетаЗПСрезПоследних.ДоплатаПоДолжности,
		|	па_НастройкаРасчетаЗПСрезПоследних.ДоплатаЗаСпецифику,
		|	па_НастройкаРасчетаЗПСрезПоследних.ДоплатаЗаМедСтаж,
		|	па_НастройкаРасчетаЗПСрезПоследних.ДоплатаЗаУчМедСтаж,
		|	па_НастройкаРасчетаЗПСрезПоследних.ДоплатаЗаВредность,
		|	па_НастройкаРасчетаЗПСрезПоследних.ДоплатаЗаУченуюСтепень,
		|	па_НастройкаРасчетаЗПСрезПоследних.ДоплатаЗаПочетноеЗвание,
		|	па_НастройкаРасчетаЗПСрезПоследних.УчастковыйМедСтаж
		|ИЗ
		|	РегистрСведений.па_НастройкаРасчетаЗП.СрезПоследних(&ДатаАкт, Организация = &Организация) КАК па_НастройкаРасчетаЗПСрезПоследних";
		
		Запрос.УстановитьПараметр("ДатаАкт",ДатаАкт);
		Запрос.УстановитьПараметр("Организация",Организация);
		
		Попытка
			Результат = Запрос.Выполнить();
		Исключение
			Сообщить(ОписаниеОшибки());              
		КонецПопытки;
		Выборка = Результат.Выбрать();
		
		Отказ = Ложь;
		СтрокаСообщения = "";
		Если Выборка.Следующий() Тогда
			Если НЕ ЗначениеЗаполнено(Выборка.ДоплатаСестрамЗаКатегорию) Тогда
				СтрокаСообщения = СтрокаСообщения+"ДоплатаСестрамЗаКатегорию, "; 
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(Выборка.ДоплатаДоМРОТ) Тогда
				СтрокаСообщения = СтрокаСообщения+"ДоплатаДоМРОТ, "; 
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(Выборка.ВыплатаЗаКачество) Тогда
				СтрокаСообщения = СтрокаСообщения+"ВыплатаЗаКачество, "; 
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(Выборка.ДоплатаЗаСложность) Тогда
				СтрокаСообщения = СтрокаСообщения+"ДоплатаЗаСложность, "; 
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(Выборка.ДоплатаЗаНочные) Тогда
				СтрокаСообщения = СтрокаСообщения+"ДоплатаЗаНочные, "; 
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(Выборка.ДоплатаЗаИнтенсивность) Тогда
				СтрокаСообщения = СтрокаСообщения+"ДоплатаЗаИнтенсивность, "; 
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(Выборка.ДоплатаПоИндКоэф) Тогда
				СтрокаСообщения = СтрокаСообщения+"ДоплатаПоИндКоэф, "; 
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(Выборка.ДоплатаЗаПроценты) Тогда
				СтрокаСообщения = СтрокаСообщения+"ДоплатаЗаПроценты, "; 
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(Выборка.ДоплатаЗаДежурство) Тогда
				СтрокаСообщения = СтрокаСообщения+"ДоплатаЗаДежурство, "; 
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(Выборка.ДоплатаЗаПраздничные) Тогда
				СтрокаСообщения = СтрокаСообщения+"ДоплатаЗаПраздничные, "; 
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(Выборка.ПроцентЗаСложность) Тогда
				СтрокаСообщения = СтрокаСообщения+"ПроцентЗаСложность, "; 
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(Выборка.ПроцентНочных) Тогда
				СтрокаСообщения = СтрокаСообщения+"ПроцентНочных, "; 
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(Выборка.ДоплатаПоДолжности) Тогда
				СтрокаСообщения = СтрокаСообщения+"ДоплатаПоДолжности, "; 
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(Выборка.ДоплатаЗаСпецифику) Тогда
				СтрокаСообщения = СтрокаСообщения+"ДоплатаЗаСпецифику, "; 
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(Выборка.ДоплатаЗаМедСтаж) Тогда
				СтрокаСообщения = СтрокаСообщения+"ДоплатаЗаМедСтаж, "; 
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(Выборка.ДоплатаЗаУчМедСтаж) Тогда
				СтрокаСообщения = СтрокаСообщения+"ДоплатаЗаУчМедСтаж, "; 
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(Выборка.ДоплатаЗаВредность) Тогда
				СтрокаСообщения = СтрокаСообщения+"ДоплатаЗаВредность, "; 
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(Выборка.ДоплатаЗаУченуюСтепень) Тогда
				СтрокаСообщения = СтрокаСообщения+"ДоплатаЗаУченуюСтепень, "; 
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(Выборка.ДоплатаЗаПочетноеЗвание) Тогда
				СтрокаСообщения = СтрокаСообщения+"ДоплатаЗаПочетноеЗвание, "; 
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(Выборка.УчастковыйМедСтаж) Тогда
				СтрокаСообщения = СтрокаСообщения+"УчастковыйМедСтаж, "; 
			КонецЕсли;	
			
			Если НЕ ПустаяСтроКа(СтрокаСообщения) Тогда
				Отказ = Истина;
				Предупреждение("Не заполнено "+СтрокаСообщения+"! Заполните регистр сведений НастройкаРасчетаЗП");
				Возврат "";
			Иначе
				Выборка.Сбросить();
				Возврат Выборка;
			КонецЕсли;	
		КонецЕсли;	
		
	КонецФункции
	
	Функция ПолучитьГрафикИзШР(ДатаАкт,Организация,ПодразделениеОрганизации,Должность,Ставка) экспорт
		
		Если НЕ ЗначениеЗаполнено(ДатаАкт) или НЕ ЗначениеЗаполнено(ПодразделениеОрганизации) или НЕ ЗначениеЗаполнено(Должность) Тогда
			Предупреждение("Не заполнены Дата Приема/Перемещения или Подразделение или Должность!");
			возврат "";
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(Ставка) Тогда
			Ставка = 1;
		КонецЕсли;	

		//Получим основной график работы из РС.ШтатноеРасписание по ставке = 1
		
		Запрос = новый запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.па_ГрафикРаботы КАК ГрафикРаботы
		|ИЗ
		|	РегистрСведений.ШтатноеРасписаниеОрганизаций.СрезПоследних(
		|			&ДатаАкт,
		|			Организация = &Организация
		|				И ПодразделениеОрганизации = &ПодразделениеОрганизации
		|				И Должность = &Должность) КАК ШтатноеРасписаниеОрганизацийСрезПоследних";
		
		Запрос.УстановитьПараметр("ДатаАкт",ДатаАкт);
		Запрос.УстановитьПараметр("Организация",Организация);
		Запрос.УстановитьПараметр("ПодразделениеОрганизации",ПодразделениеОрганизации);
		Запрос.УстановитьПараметр("Должность",Должность);
		
		Попытка
			Результат = Запрос.Выполнить();
		Исключение
			Сообщить(ОписаниеОшибки());              
		КонецПопытки;
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			ГрафикРаботыНаПолнуюСтавку = Выборка.ГрафикРаботы;
		КонецЕсли;	
		
		Если Ставка = 1 Тогда
			Возврат  ГрафикРаботыНаПолнуюСтавку;
		Иначе  //найдем графики неполных ставок
			Запрос = новый запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ГрафикиРаботы.Ссылка как ГрафикРаботыНаНеполнуюСтавку
			|ИЗ
			|	Справочник.ГрафикиРаботы КАК ГрафикиРаботы
			|ГДЕ
			|	ГрафикиРаботы.ГрафикПолногоРабочегоВремени = &ГрафикРаботыНаПолнуюСтавку
			|	И ГрафикиРаботы.Наименование ПОДОБНО &МаскаСтавки";
			
			Запрос.УстановитьПараметр("ГрафикРаботыНаПолнуюСтавку",ГрафикРаботыНаПолнуюСтавку);
			Запрос.УстановитьПараметр("МаскаСтавки","%"+Строка(Ставка)+"%");
			
			Попытка
				Результат = Запрос.Выполнить();
			Исключение
				Сообщить(ОписаниеОшибки());              
			КонецПопытки;
			Выборка = Результат.Выбрать();
			Если Выборка.Следующий() Тогда
				Возврат Выборка.ГрафикРаботыНаНеполнуюСтавку;
			КонецЕсли;	
		КонецЕсли;	
		
	КонецФункции
	
	Процедура ВыводФормыВыбораДолжности(Элемент, ДатаАкт, ПодразделениеОрганизации, Должность) экспорт
		
		Если ЗначениеЗаполнено(ДатаАкт) и ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
			// Выберем все должности заданного подразделения по ШР
			// Откроем форму списка с отбором только по найденным должностям
			Запрос = новый запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ШтатноеРасписаниеОрганизацийСрезПоследних.Должность
			|ИЗ
			|	РегистрСведений.ШтатноеРасписаниеОрганизаций.СрезПоследних(&ДатаАкт, ПодразделениеОрганизации = &ПодразделениеОрганизации) КАК ШтатноеРасписаниеОрганизацийСрезПоследних
			|ГДЕ
			|	ШтатноеРасписаниеОрганизацийСрезПоследних.КоличествоСтавок <> 0
			|
			|УПОРЯДОЧИТЬ ПО
			|	ШтатноеРасписаниеОрганизацийСрезПоследних.Должность.Наименование";
			
			Запрос.УстановитьПараметр("ДатаАкт",ДатаАкт);
			Запрос.УстановитьПараметр("ПодразделениеОрганизации",ПодразделениеОрганизации);
			
			Попытка
				Результат = Запрос.Выполнить();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			
			Выборка = Результат.Выбрать();
			
			СписокДолжностей = Новый СписокЗначений;
			Пока Выборка.Следующий() Цикл
				СписокДолжностей.Добавить(Выборка.Должность);
			КонецЦикла;	
			
			ФормаВыбора = Справочники.ДолжностиОрганизаций.ПолучитьФормуВыбора("ФормаВыбора", Элемент);
			ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
			ФормаВыбора.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСписке;
			ФормаВыбора.Отбор.Ссылка.Значение = СписокДолжностей;
			ФормаВыбора.Отбор.Ссылка.Использование = Истина; 
			ФормаВыбора.ПараметрТекущаяСтрока  = Должность;
			ФормаВыбора.Открыть();
		Иначе
			Предупреждение("Не заполнены Дата Приема/Перемещения или Подразделение!");
		КонецЕсли;	
		
	КонецПроцедуры
	
	Процедура ВыводФормыВыбораДолжностиПоПКУ(Элемент,ПКУ) экспорт
		
		// Выберем все должности по заданному ПКУ
		// Откроем форму списка с отбором только по найденным должностям
		Запрос = новый запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДолжностиОрганизаций.Ссылка КАК Должность
		|ИЗ
		|	Справочник.ДолжностиОрганизаций КАК ДолжностиОрганизаций
		|ГДЕ
		|	ДолжностиОрганизаций.па_ПКУ = &ПКУ";
		
		Запрос.УстановитьПараметр("ПКУ",ПКУ);
		
		Попытка
			Результат = Запрос.Выполнить();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		Выборка = Результат.Выбрать();
		
		СписокДолжностей = Новый СписокЗначений;
		Пока Выборка.Следующий() Цикл
			СписокДолжностей.Добавить(Выборка.Должность);
		КонецЦикла;	
		
		ФормаВыбора = Справочники.ДолжностиОрганизаций.ПолучитьФормуВыбора("ФормаВыбора", Элемент);
		ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
		ФормаВыбора.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСписке;
		ФормаВыбора.Отбор.Ссылка.Значение = СписокДолжностей;
		ФормаВыбора.Отбор.Ссылка.Использование = Истина; 
		ФормаВыбора.ПараметрТекущаяСтрока  = Элемент.Значение;
		ФормаВыбора.Открыть();
		
	КонецПроцедуры
	
	Функция ЗаполнитьКраткийСоставДокумента(ТЗ) экспорт
		
		КраткийСоставДокумента = "";
		Для Каждого СтрокаТЗ Из ТЗ Цикл
			Если ЗначениеЗаполнено(СтрокаТЗ.Сотрудник) Тогда
				ФИОФизЛица = ОбщегоНазначенияЗК.ФамилияИнициалыФизЛица(СтрокаТЗ.Сотрудник);
				КраткийСоставДокумента = КраткийСоставДокумента+ФИОФизЛица+", ";
			КонецЕсли;
		КонецЦикла;	
		КраткийСоставДокумента = Лев(КраткийСоставДокумента,СтрДлина(КраткийСоставДокумента)-2);
		
		Возврат КраткийСоставДокумента;	
		
	КонецФункции
	
	Функция РеквизитыЗаполнены(СтруктураРеквизитовШапки, ИмяТабличнойЧасти, ТабЧасть, СтруктураРеквизитовТабличнойЧасти) экспорт
		
		//Шапка
		Если СтруктураРеквизитовШапки <> Неопределено Тогда
			Для каждого Элемент Из СтруктураРеквизитовШапки Цикл
				Значение = Элемент.Значение;
				Если НЕ ЗначениеЗаполнено(Значение) Тогда
					Сообщить("Не заполнено значение реквизита """ + Элемент.Ключ + """!");
					Возврат ложь;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;		
		
		//Табличная часть
		Если СтруктураРеквизитовТабличнойЧасти <> Неопределено Тогда
			Для каждого СтрокаТаблицы Из ТабЧасть Цикл
				Для каждого Элемент Из СтруктураРеквизитовТабличнойЧасти Цикл
					Значение = СтрокаТаблицы[Элемент.Ключ];
					Если НЕ ЗначениеЗаполнено(Значение) Тогда 
						Сообщить("В строке № "+СокрЛП(СтрокаТаблицы.НомерСтроки)+" табличной части """+ИмяТабличнойЧасти+""" не заполнено значение реквизита """ + Элемент.Ключ + """!");
						Возврат ложь;
					КонецЕсли; 
				КонецЦикла; 
			КонецЦикла; 
		КонецЕсли;
		
		Возврат истина;
		
	КонецФункции // РеквизитыЗаполнены
	
	Функция СвязанныйДокумент(ДокументОснование) экспорт
		
		Запрос = новый Запрос;
		Запрос.Текст = 
		//НЕ РАБОТАЕТ, ЕСЛИ НЕСКОЛЬКО СВЯЗАННЫХ ДОКУМЕНТОВ
		"ВЫБРАТЬ
		|	ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций.Ссылка
		|ИЗ
		|	Документ.ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций КАК ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций
		|ГДЕ
		|	ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций.ДокументОснование = &ДокументОснование";
		//|	И ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций.ПометкаУдаления = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("ДокументОснование",ДокументОснование);
		Попытка
			Результат = Запрос.Выполнить();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			СвязанныйДокумент = Выборка.Ссылка;
		КонецЕсли;	
		
		Возврат СвязанныйДокумент;
		
	КонецФункции	
	
	Процедура ЗаписатьСвязанныйДокумент(ДокументОснование, ПометкаУдаления) экспорт
		
		ДокументБУ = па_ОбщиеФункции.СвязанныйДокумент(ДокументОснование);
		Если ЗначениеЗаполнено(ДокументБУ) Тогда
			ДокументБУ = ДокументБУ.ПолучитьОбъект();
			ДокументБУ.ПометкаУдаления = ПометкаУдаления;
			ДокументБУ.Дата = ДокументОснование.Дата;
			ДокументБУ.УстановитьНовыйНомер();
			ДокументБУ.ОсновныеНачисления.Очистить();
			//Вызовем процедуру из Модуля объекта документа ВводСведенийОПлановыхУдержанияхРаботниковОрганизаций
			ДокументБУ.ЗаполнитьДокумент(ДокументОснование);
		Иначе
			//создадим новые документы БУ
			//Для каждого ТекСтрока Из ОсновныеНачисления Цикл
			
			ДокументБУ = Документы.ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций.СоздатьДокумент();
			ДокументБУ.Дата = ДокументОснование.Дата;
			//ДокументБУ.Номер = ;
			ДокументБУ.Организация = ДокументОснование.Организация;
			ДокументБУ.Проведен = истина;
			
			//Вызовем процедуру из Модуля объекта документа ВводСведенийОПлановыхУдержанияхРаботниковОрганизаций
			ДокументБУ.ЗаполнитьДокумент(ДокументОснование);
			
			//НоваяСтрока = ДокументБУ.ОсновныеНачисления.Добавить(); 
			//НоваяСтрока.Сотрудник = Выборка.Сотрудник;
			//НоваяСтрока.ФизЛицо = Выборка.Сотрудник.ФизЛицо;
			//НоваяСтрока.ДатаУвольнения = Мас[Сч].ДатаУвольнения;
			//НоваяСтрока.ПрекращатьСтандартныеВычеты = истина;
			
			//КонецЦикла;	
		КонецЕсли;
		
		Попытка
			ДокументБУ.Записать(РежимЗаписиДокумента.Проведение); 
			Сообщить("Создан/изменен документ: "+ДокументБУ);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;	
		
	КонецПроцедуры //ЗаписатьСвязанныйДокумент()	
	
	Процедура УдалитьСвязанныйДокумент(ДокументОснование, ПометкаУдаления) экспорт
		
		ДокументБУ = па_ОбщиеФункции.СвязанныйДокумент(ДокументОснование);
		Если ЗначениеЗаполнено(ДокументБУ) Тогда
			ДокументБУ = ДокументБУ.ПолучитьОбъект();
			//ДокументБУ.Проведен = ложь;
			ДокументБУ.ПометкаУдаления = ПометкаУдаления;
		КонецЕсли;
		
		Попытка
			ДокументБУ.Записать(РежимЗаписиДокумента.ОтменаПроведения); 
			Сообщить("Отменено проведение документа: "+ДокументБУ);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;	
		
	КонецПроцедуры //УдалитьСвязанныйДокумент()	
	
	Процедура ОбработатьСвязанныйДокумент(ДокументОснование, РежимЗаписи, ПометкаУдаления) экспорт
		
		//СтрокаСообщения = "";
		//ДокументБУ = па_ОбщиеФункции.СвязанныйДокумент(ДокументОснование.Ссылка);
		//
		//Если РежимЗаписи = РежимЗаписиДокумента.Запись Или РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		//	Если ЗначениеЗаполнено(ДокументБУ) Тогда
		//		ДокументБУ = ДокументБУ.ПолучитьОбъект();
		//		ДокументБУ.Дата = ДокументОснование.Дата;
		//		ДокументБУ.ПометкаУдаления = ПометкаУдаления;
		//		ДокументБУ.ОсновныеНачисления.Очистить();
		//		//Вызовем процедуру из Модуля объекта документа ВводСведенийОПлановыхУдержанияхРаботниковОрганизаций
		//		ДокументБУ.ЗаполнитьДокумент(ДокументОснование);
		//		СтрокаСообщения = "Записан/проведен документ: ";
		//	Иначе
		//		//создадим новый документ ПостоянныеСведенияБУ
		//		ДокументБУ = Документы.ВводСведенийОРеглУчетеПлановыхНачисленийРаботниковОрганизаций.СоздатьДокумент();
		//		ДокументБУ.Дата = ДокументОснование.Дата;
		//		//ДокументБУ.Номер = ;
		//		ДокументБУ.Организация = ДокументОснование.Организация;
		//		//ДокументБУ.Проведен = истина;
		//		
		//		//Вызовем процедуру из Модуля объекта документа ВводСведенийОПлановыхУдержанияхРаботниковОрганизаций
		//		ДокументБУ.ЗаполнитьДокумент(ДокументОснование);
		//		СтрокаСообщения = "Создан документ: ";
		//	КонецЕсли;
		//Иначе //ОтменаПроведения
		//	Если ЗначениеЗаполнено(ДокументБУ) Тогда
		//		ДокументБУ = ДокументБУ.ПолучитьОбъект();
		//		ДокументБУ.ПометкаУдаления = ПометкаУдаления;
		//		СтрокаСообщения = "Отменено проведение документа: ";
		//	КонецЕсли;	
		//КонецЕсли;	
		//
		//Попытка
		//	ДокументБУ.Записать(РежимЗаписи); 
		//	Сообщить(СтрокаСообщения + ДокументБУ);
		//Исключение
		//	Сообщить(ОписаниеОшибки());
		//КонецПопытки;	
		
	КонецПроцедуры //ОбработатьСвязанныйДокумент()	

	Функция ДействующаяКатегория(ВыборкаДетали, СпКатегорий) экспорт
		
		Запрос = новый запрос;
		Запрос.Текст = 
		
		"ВЫБРАТЬ
		|	РаботникиОрганизацийСрезПоследних.Сотрудник,
		|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации,
		|	РаботникиОрганизацийСрезПоследних.Должность,
		|	РаботникиОрганизацийСрезПоследних.Должность.па_МедицинскаяСпециальность
		|ПОМЕСТИТЬ ВТ_ДолжностьСотр
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|			&ДатаСреза,
		|			Организация = &Организация
		|				И Сотрудник = &Сотрудник
		|				И ПодразделениеОрганизации = &ПодразделениеОрганизации) КАК РаботникиОрганизацийСрезПоследних
		|ГДЕ
		|	РаботникиОрганизацийСрезПоследних.Должность.АУП = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДолжностьСотр.Сотрудник,
		|	ВТ_ДолжностьСотр.ПодразделениеОрганизации,
		|	ВТ_ДолжностьСотр.Должность,
		|	ВТ_ДолжностьСотр.Должностьпа_МедицинскаяСпециальность,
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.а_КатегорияПерсонала
		|ПОМЕСТИТЬ ВТ_ОтборПоКатегории
		|ИЗ
		|	ВТ_ДолжностьСотр КАК ВТ_ДолжностьСотр
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций.СрезПоследних(
		|				&ДатаСреза,
		|				Организация = &Организация
		|					И ПодразделениеОрганизации = &ПодразделениеОрганизации) КАК ШтатноеРасписаниеОрганизацийСрезПоследних
		|		ПО ВТ_ДолжностьСотр.Должность = ШтатноеРасписаниеОрганизацийСрезПоследних.Должность
		|ГДЕ
		|	ШтатноеРасписаниеОрганизацийСрезПоследних.а_КатегорияПерсонала В(&СпКатегорий)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОтборПоКатегории.Сотрудник,
		|	ВТ_ОтборПоКатегории.ПодразделениеОрганизации,
		|	ВТ_ОтборПоКатегории.Должность,
		|	ВТ_ОтборПоКатегории.Должностьпа_МедицинскаяСпециальность,
		|	ВТ_ОтборПоКатегории.а_КатегорияПерсонала как КатегорияПерсонала,
		|	а_ПрисвоенныеКвалификационныеКатегорииСрезПоследних.Специальность,
		|	а_ПрисвоенныеКвалификационныеКатегорииСрезПоследних.КвалификационнаяКатегория,
		|	а_ПрисвоенныеКвалификационныеКатегорииСрезПоследних.Период,
		|	а_ПрисвоенныеКвалификационныеКатегорииСрезПоследних.ПериодЗавершения
		|ИЗ
		|	ВТ_ОтборПоКатегории КАК ВТ_ОтборПоКатегории
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.а_ПрисвоенныеКвалификационныеКатегории.СрезПоследних(
		|				&ДатаСреза,
		|				Сотрудник.Физлицо = &ФизЛицо
		|					И (&ДатаСреза <= ПериодЗавершения
		|						ИЛИ ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1))
		|					И (РешениеЭкспертнойКомиссии = ЗНАЧЕНИЕ(Перечисление.а_РешениеЭкспертнойКомиссии.ПрисвоитьКатегорию)
		|						ИЛИ РешениеЭкспертнойКомиссии = ЗНАЧЕНИЕ(Перечисление.а_РешениеЭкспертнойКомиссии.ПодтвердитьКатегорию))) КАК а_ПрисвоенныеКвалификационныеКатегорииСрезПоследних
		|		ПО ВТ_ОтборПоКатегории.Должностьпа_МедицинскаяСпециальность = а_ПрисвоенныеКвалификационныеКатегорииСрезПоследних.Специальность";
		
		//"ВЫБРАТЬ
		//|	а_ПрисвоенныеКвалификационныеКатегорииСрезПоследних.Период,
		//|	а_ПрисвоенныеКвалификационныеКатегорииСрезПоследних.Сотрудник,
		//|	а_ПрисвоенныеКвалификационныеКатегорииСрезПоследних.Специальность,
		//|	а_ПрисвоенныеКвалификационныеКатегорииСрезПоследних.КвалификационнаяКатегория,
		//|	а_ПрисвоенныеКвалификационныеКатегорииСрезПоследних.ПериодЗавершения,
		//|	а_ПрисвоенныеКвалификационныеКатегорииСрезПоследних.РешениеЭкспертнойКомиссии
		//|ИЗ
		//|	РегистрСведений.а_ПрисвоенныеКвалификационныеКатегории.СрезПоследних(
		//|			&ДатаСреза,
		//|			Сотрудник = &Сотрудник
		//|				И (&ДатаСреза <= ПериодЗавершения
		//|					ИЛИ ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1))
		//|				И (РешениеЭкспертнойКомиссии = ЗНАЧЕНИЕ(Перечисление.а_РешениеЭкспертнойКомиссии.ПрисвоитьКатегорию)
		//|					ИЛИ РешениеЭкспертнойКомиссии = ЗНАЧЕНИЕ(Перечисление.а_РешениеЭкспертнойКомиссии.ПодтвердитьКатегорию))
		//|				И Специальность = &СпециальностьПоДолжности) КАК а_ПрисвоенныеКвалификационныеКатегорииСрезПоследних";
		//
		Запрос.УстановитьПараметр("ДатаСреза",ВыборкаДетали.ДатаНачала);
		Запрос.УстановитьПараметр("Организация",ВыборкаДетали.Организация);
		Запрос.УстановитьПараметр("Сотрудник",ВыборкаДетали.Сотрудник);
		Запрос.УстановитьПараметр("ФизЛицо",ВыборкаДетали.Сотрудник.ФизЛицо);
		Запрос.УстановитьПараметр("ПодразделениеОрганизации",ВыборкаДетали.ПодразделениеОрганизации);
		Запрос.УстановитьПараметр("СпКатегорий",СпКатегорий);
		
		Попытка
			Результат = Запрос.Выполнить();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		Структура_Категория = Новый Структура("Должность, КатегорияПерсонала, Специальность, Категория");
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		//Структура_Категория.Сотрудник = Выборка.Сотрудник;
		//Структура_Категория.Подразделение = Выборка.ПодразделениеОрганизации;
		Структура_Категория.Должность = Выборка.Должность;
		Структура_Категория.КатегорияПерсонала = Выборка.КатегорияПерсонала;
		Структура_Категория.Специальность = Выборка.Специальность;
		Структура_Категория.Категория = Выборка.КвалификационнаяКатегория;
		
		Возврат Структура_Категория;
		
	КонецФункции	//ДействующаяКатегория() 
	
	Функция ПроцентПоКатегории(Категория, ДатаСреза) экспорт
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	а_ПараметрыКвалификационныхКатегорийСрезПоследних.Период,
		|	а_ПараметрыКвалификационныхКатегорийСрезПоследних.КвалификационнаяКатегория,
		|	а_ПараметрыКвалификационныхКатегорийСрезПоследних.Процент,
		|	а_ПараметрыКвалификационныхКатегорийСрезПоследних.ПроцентМедсестрам
		|ИЗ
		|	РегистрСведений.а_ПараметрыКвалификационныхКатегорий.СрезПоследних(&ДатаСреза, КвалификационнаяКатегория = &Категория) КАК а_ПараметрыКвалификационныхКатегорийСрезПоследних";
		
		
		Запрос.УстановитьПараметр("ДатаСреза",ДатаСреза);
		Запрос.УстановитьПараметр("Категория",Категория);
		
		Попытка
			Результат = Запрос.Выполнить();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
				
		Структура_ПроцентПоКатегории = Новый Структура("Процент, ПроцентМедсестрам");
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Структура_ПроцентПоКатегории.Процент = Выборка.Процент;
		Структура_ПроцентПоКатегории.ПроцентМедсестрам = Выборка.ПроцентМедсестрам;
		
		Возврат Структура_ПроцентПоКатегории;
			
	КонецФункции  //ПроцентПоКатегории	
	
	Функция СписокВРСреднегоЗаработка() 
		
	//Получим все виды расчетов, входящих в базу среднего заработка
		СпВР = новый СписокЗначений;
		Для каждого ТекВР Из ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуИндексируемые.БазовыеВидыРасчета Цикл
			СпВР.Добавить(ТекВР.ВидРасчета); 
		КонецЦикла;	
		Для каждого ТекВР Из ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуНеИндексируемые.БазовыеВидыРасчета Цикл
			СпВР.Добавить(ТекВР.ВидРасчета); 
		КонецЦикла;	
		Для каждого ТекВР Из ПланыВидовРасчета.СреднийЗаработок.ПоПремиямИндексируемые.БазовыеВидыРасчета Цикл
			СпВР.Добавить(ТекВР.ВидРасчета); 
		КонецЦикла;	
		Для каждого ТекВР Из ПланыВидовРасчета.СреднийЗаработок.ПоПремиямНеИндексируемые.БазовыеВидыРасчета Цикл
			СпВР.Добавить(ТекВР.ВидРасчета); 
		КонецЦикла;	
		Для каждого ТекВР Из ПланыВидовРасчета.СреднийЗаработок.ПоФиксПремиямНеИндексируемые.БазовыеВидыРасчета Цикл
			СпВР.Добавить(ТекВР.ВидРасчета); 
		КонецЦикла;	
		
		Возврат СпВР;
	
	КонецФункции	
	
	Функция СписокВидовОтклоненийДляРаспределенияПоИФ(ДокументСЗ)
		
		СпВР = новый СписокЗначений;
		
		Если ТипЗнч(ДокументСЗ.Ссылка) = Тип("ДокументСсылка.НачислениеОтпускаРаботникамОрганизаций") Тогда
			СпВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпКалендарныеДни);
			СпВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпШестидневка);
			СпВР.Добавить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаКалендарныеДниБезУвольнения);
			СпВР.Добавить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаШестидневкаБезУвольнения);
			СпВР.Добавить(ДокументСЗ.ВидРасчетаДополнительногоОтпуска);
		ИначеЕсли ТипЗнч(ДокументСЗ.Ссылка) = Тип("ДокументСсылка.ОплатаПоСреднемуЗаработку") Тогда	
			СпВР.Добавить(ДокументСЗ.ВидРасчета);
		ИначеЕсли ТипЗнч(ДокументСЗ.Ссылка) = Тип("ДокументСсылка.РасчетПриУвольненииРаботникаОрганизаций") Тогда	
			//СпВР.Добавить();
		КонецЕсли;
		
		Возврат СпВР;
		
	КонецФункции	

	
	//Процедура ДобавитьВСреднийЗаработокВнутрСовместителей(ДокументСЗ, ТЧ_Начисления) экспорт
	//Добавим в расчет типового среднего заработка заработок по всем внутренним совместителям ФизЛица
	Процедура ДобавитьВСреднийЗаработокВнутрСовместителей(ДокументСЗ) экспорт
		
		//Получим все виды расчетов, входящих в базу среднего заработка
		СпВР = СписокВРСреднегоЗаработка();
		
		//Определим, какую ТЧ будем обрабатывать
		Если ТипЗнч(ДокументСЗ.Ссылка) = Тип("ДокументСсылка.НачислениеОтпускаРаботникамОрганизаций") Тогда
			ТЧ_1 = ДокументСЗ.РасчетСреднегоПоКалендарным;
			ТЧ_2 = ДокументСЗ.РасчетСреднегоПоШестидневке;
		ИначеЕсли ТипЗнч(ДокументСЗ.Ссылка) = Тип("ДокументСсылка.ОплатаПоСреднемуЗаработку") Тогда	
			ТЧ_1 = ДокументСЗ.РасчетСреднего;	
			ТЧ_2 = новый ТаблицаЗначений;
		ИначеЕсли ТипЗнч(ДокументСЗ.Ссылка) = Тип("ДокументСсылка.РасчетПриУвольненииРаботникаОрганизаций") Тогда	
			ТЧ_1 = ДокументСЗ.РасчетСреднегоДляОтпуска;
			ТЧ_2 = ДокументСЗ.РасчетСреднего;
		КонецЕсли;
		
		//Определим все внутренние совместительства основного сотрудника за период расчета
		//Запрос = новый запрос;
		//Запрос.Текст = 
		// "ВЫБРАТЬ
		// |	СотрудникиОрганизаций.Ссылка как Сотрудник,
		// |	СотрудникиОрганизаций.ВидЗанятости,
		// |	СотрудникиОрганизаций.ДатаПриемаНаРаботу,
		// |	СотрудникиОрганизаций.ДатаУвольнения
		// |ИЗ
		// |	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		// |ГДЕ
		// |	СотрудникиОрганизаций.Физлицо = &Физлицо
		// |	И СотрудникиОрганизаций.ВидЗанятости <> &ОсновнойВидЗанятости
		// |	И СотрудникиОрганизаций.ДатаПриемаНаРаботу <= &ДатаКон
		// |	И (СотрудникиОрганизаций.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		// |			ИЛИ СотрудникиОрганизаций.ДатаУвольнения >= &ДатаНач)
		// |	И СотрудникиОрганизаций.Организация = &Организация";
		// 
		//Запрос.УстановитьПараметр("Физлицо",ДокументСЗ.Физлицо);
		//Запрос.УстановитьПараметр("ОсновнойВидЗанятости",Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
		//Запрос.УстановитьПараметр("ДатаНач",ДокументСЗ.ПериодРасчетаСреднегоЗаработкаНачало);
		//Запрос.УстановитьПараметр("ДатаКон",ДокументСЗ.ПериодРасчетаСреднегоЗаработкаОкончание);
		//Запрос.УстановитьПараметр("Организация",ДокументСЗ.Организация);
		//
		//Попытка
		//	Результат = Запрос.Выполнить();
		//Исключение
		//	Сообщить(ОписаниеОшибки());
		//КонецПопытки;	
		//
		//СпВнутрСовместителей = новый СписокЗначений;
		//
		//Выборка = Результат.Выбрать();
		//Пока Выборка.Следующий() Цикл
		//	СпВнутрСовместителей.Добавить(Выборка.Сотрудник);
		//КонецЦикла;	
		 
		//Выберем все начисления по внутренним совместителям за период расчета
		//В выборку включим Внутренних совместителей, у которых ДатаПриема >= ДатеПриемаВыбранногоСотрудника
		// и ДатаУвольнения >= ДатеУвольненияВыбранногоСотрудника
		Запрос = новый запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
		|	СотрудникиОрганизаций.ВидЗанятости,
		|	СотрудникиОрганизаций.ДатаПриемаНаРаботу,
		|	СотрудникиОрганизаций.ДатаУвольнения
		|ПОМЕСТИТЬ ВТ_ВнСовместители
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Физлицо = &Физлицо
		//|	И СотрудникиОрганизаций.ВидЗанятости <> &ОсновнойВидЗанятости
		
	//??????????????

		|	И СотрудникиОрганизаций.ВидЗанятости = &ВнутреннееСовместительство    
		|	И СотрудникиОрганизаций.Ссылка <> &ВыбСотрудник
		|	И СотрудникиОрганизаций.ДатаПриемаНаРаботу >= &ДатаПриемаВыбСотр
		| 	И (СотрудникиОрганизаций.ДатаУвольнения >= &ДатаУвольненияВыбСотр
		|	ИЛИ СотрудникиОрганизаций.ДатаУвольнения = ДатаВремя(1,1,1))
		
 	//??????????????
		//|	И СотрудникиОрганизаций.ДатаПриемаНаРаботу <= &ДатаКон
		//|	И (СотрудникиОрганизаций.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		//|			ИЛИ СотрудникиОрганизаций.ДатаУвольнения >= &ДатаНач)
		|	И СотрудникиОрганизаций.Организация = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОсновныеНачисленияРаботниковОрганизаций.Сотрудник КАК Сотрудник,
		|	НАЧАЛОПЕРИОДА(ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало, МЕСЯЦ) КАК НачалоПериода,
		|	ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета,
		|	ОсновныеНачисленияРаботниковОрганизаций.Результат КАК Результат,
		|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало,
		|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец
		|ИЗ
		|	ВТ_ВнСовместители КАК ВТ_ВнСовместители
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
		|		ПО ВТ_ВнСовместители.Сотрудник = ОсновныеНачисленияРаботниковОрганизаций.Сотрудник
		|ГДЕ
		|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияНачало <= &ДатаКон
		|	И ОсновныеНачисленияРаботниковОрганизаций.ПериодДействияКонец >= &ДатаНач
		|	И ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета В(&СпВР)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДополнительныеНачисленияРаботниковОрганизаций.Сотрудник,
		|	НАЧАЛОПЕРИОДА(ДополнительныеНачисленияРаботниковОрганизаций.ПериодРегистрации, МЕСЯЦ),
		|	ДополнительныеНачисленияРаботниковОрганизаций.ВидРасчета,
		|	ДополнительныеНачисленияРаботниковОрганизаций.Результат,
		|	ДополнительныеНачисленияРаботниковОрганизаций.ПериодРегистрации,
		|	NULL
		|ИЗ
		|	ВТ_ВнСовместители КАК ВТ_ВнСовместители
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисленияРаботниковОрганизаций
		|		ПО ВТ_ВнСовместители.Сотрудник = ДополнительныеНачисленияРаботниковОрганизаций.Сотрудник
		|ГДЕ
		|	ДополнительныеНачисленияРаботниковОрганизаций.ПериодРегистрации <= &ДатаКон
		|	И ДополнительныеНачисленияРаботниковОрганизаций.ПериодРегистрации >= &ДатаНач
		|	И ДополнительныеНачисленияРаботниковОрганизаций.ВидРасчета В(&СпВР)
		|ИТОГИ
		|	СУММА(Результат)
		|ПО
		|	Сотрудник,
		|	НачалоПериода";
		
		Запрос.УстановитьПараметр("Физлицо",ДокументСЗ.Физлицо);
		//Запрос.УстановитьПараметр("ОсновнойВидЗанятости",Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
		Запрос.УстановитьПараметр("ВнутреннееСовместительство",Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
		Запрос.УстановитьПараметр("ВыбСотрудник",ДокументСЗ.Сотрудник);
		Запрос.УстановитьПараметр("ДатаПриемаВыбСотр",ДокументСЗ.Сотрудник.ДатаПриемаНаРаботу);
		Запрос.УстановитьПараметр("ДатаНач",ДокументСЗ.ПериодРасчетаСреднегоЗаработкаНачало);
		Запрос.УстановитьПараметр("ДатаКон",ДокументСЗ.ПериодРасчетаСреднегоЗаработкаОкончание);
		Запрос.УстановитьПараметр("Организация",ДокументСЗ.Организация);
		Запрос.УстановитьПараметр("СпВР",СпВР);
		Запрос.УстановитьПараметр("ДатаУвольненияВыбСотр",ДокументСЗ.Сотрудник.ДатаУвольнения);
		
		Попытка
			Результат = Запрос.Выполнить();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;	
		
		//Группировка 1
		ВыборкаСотрудник = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСотрудник.Следующий() Цикл
			
			//Группировка 2
			ВыборкаПериод = ВыборкаСотрудник.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПериод.Следующий() Цикл
				//Добавим в табличную часть заработок внутренних совместителей
				//
				Если ТЧ_1.Количество()>0 Тогда    //????????????????????????
					НоваяСтрока = ТЧ_1.Добавить(); 
					НоваяСтрока.ВидРасчета  = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуИндексируемые;
					НоваяСтрока.БазовыйПериодНачало	= ВыборкаПериод.НачалоПериода;
					НоваяСтрока.БазовыйПериодКонец  = КонецМесяца(ВыборкаПериод.НачалоПериода);
					НоваяСтрока.КоэффициентИндексации = 1;
					НоваяСтрока.Результат = ВыборкаПериод.Результат;
					НоваяСтрока.ЧислоМесяцев = 1;
				КонецЕсли;
				Если ТЧ_2.Количество()>0 Тогда    //???????????????????????????????
					НоваяСтрока = ТЧ_2.Добавить(); 
					НоваяСтрока.ВидРасчета  = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуИндексируемые;
					НоваяСтрока.БазовыйПериодНачало	= ВыборкаПериод.НачалоПериода;
					НоваяСтрока.БазовыйПериодКонец  = КонецМесяца(ВыборкаПериод.НачалоПериода);
					НоваяСтрока.КоэффициентИндексации = 1;
					НоваяСтрока.Результат = ВыборкаПериод.Результат;
					НоваяСтрока.ЧислоМесяцев = 1;
				КонецЕсли;
			КонецЦикла;	 //Группировка 2
			
		КонецЦикла;	//Группировка 1
		
	КонецПроцедуры //ДобавитьВСреднийЗаработокВнутрСовместителей
	
	
	Процедура РассчитатьСреднийПоИФ(ДокументСЗ)	 экспорт
		
		//Получим все виды расчетов, входящих в базу среднего заработка
		СпВР = СписокВРСреднегоЗаработка();
		
		ТЧ = ДокументСЗ.па_РасчетСреднегоПоИФ;
		ТЧ.Очистить();

		//Выберем все начисления по ФизЛицу за период расчета
		//В выборку включим Основного сотрудника или Внешнего совместителя
		//И его Внутренних совместителей, у которых ДатаПриема >= ДатеПриемаВыбранногоСотрудника
		Запрос = новый запрос;
		Запрос.Текст = 
		//"ВЫБРАТЬ
		//|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
		//|	СотрудникиОрганизаций.ВидЗанятости,
		//|	СотрудникиОрганизаций.ДатаПриемаНаРаботу,
		//|	СотрудникиОрганизаций.ДатаУвольнения
		//|ПОМЕСТИТЬ ВТ_Сотрудники
		//|ИЗ
		//|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		//|ГДЕ
		//|	СотрудникиОрганизаций.Физлицо = &Физлицо
		////??????????????????
		////|	И СотрудникиОрганизаций.ДатаПриемаНаРаботу <= &ДатаКон
		////|	И (СотрудникиОрганизаций.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		////|			ИЛИ СотрудникиОрганизаций.ДатаУвольнения >= &ДатаНач)
		//|	И СотрудникиОрганизаций.Организация = &Организация";
		//
		//Если ДокументСЗ.па_НеУчитыватьСовместительство ИЛИ 
		//	ДокументСЗ.Сотрудник.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
		//	//Если мы не учитываем внутренних совместителей или в документе выбран внутренний совместитель, то
		//	//Мы должны взять заработок только выбранного в документе сотрудника
		//	Запрос.Текст = Запрос.Текст + "
		//	//|	И СотрудникиОрганизаций.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)";
		//	|	И СотрудникиОрганизаций.Ссылка = &ВыбСотрудник";
		//КонецЕсли;
		
		"ВЫБРАТЬ
		|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
		|	СотрудникиОрганизаций.ВидЗанятости,
		|	СотрудникиОрганизаций.ДатаПриемаНаРаботу,
		|	СотрудникиОрганизаций.ДатаУвольнения
		|ПОМЕСТИТЬ ВТ_Сотрудники
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Организация = &Организация";
		//|	(СотрудникиОрганизаций.Ссылка = &ВыбСотрудник";
		
		Если ДокументСЗ.па_НеУчитыватьСовместительство ИЛИ 
			ДокументСЗ.Сотрудник.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
			//будем брать заработок только выбранного сотрудника
			Запрос.Текст = Запрос.Текст + "
			|	И (СотрудникиОрганизаций.Ссылка = &ВыбСотрудник";
		Иначе
			//будем учитывать заработок Выбранного сотрудника (ОСНовного или Внешнего совместителя) и его Внутренних совместителей
			Запрос.Текст = Запрос.Текст + "
			|	И СотрудникиОрганизаций.Физлицо = &Физлицо
			| 	И СотрудникиОрганизаций.ДатаПриемаНаРаботу >= &ДатаПриемаВыбСотр
			| 	И (СотрудникиОрганизаций.ДатаУвольнения >= &ДатаУвольненияВыбСотр
			|	ИЛИ СотрудникиОрганизаций.ДатаУвольнения = ДатаВремя(1,1,1))";
			//|	ИЛИ (СотрудникиОрганизаций.ВидЗанятости = &ВнутреннееСовместительство
			//|	И	СотрудникиОрганизаций.Физлицо = &Физлицо
			//| 	И СотрудникиОрганизаций.ДатаПриемаНаРаботу >= &ДатаПриемаВыбСотр)";
		КонецЕсли;
		//Запрос.Текст = Запрос.Текст + "
		//|	)
		//|	И СотрудникиОрганизаций.Организация = &Организация
		//| ";
		Запрос.Текст = Запрос.Текст + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БУОсновныеНачисления.Сотрудник КАК Сотрудник,
		|	НАЧАЛОПЕРИОДА(БУОсновныеНачисления.ПериодДействияНачало, МЕСЯЦ) КАК НачалоПериода,
		|	БУОсновныеНачисления.ВидРасчета,
		|	БУОсновныеНачисления.Результат КАК Результат,
		|	БУОсновныеНачисления.ПериодДействияНачало,
		|	БУОсновныеНачисления.ПериодДействияКонец,
		|	БУОсновныеНачисления.КОСГУ КАК КОСГУ,
		|	БУОсновныеНачисления.СтатьяФинансирования КАК СтатьяФинансирования,
		|	БУОсновныеНачисления.СтатьяРасходов КАК СтатьяРасходов
		//|	БУОсновныеНачисления.КодДоходаЕСН КАК КодДоходаЕСН,
		//|	БУОсновныеНачисления.ОблагаетсяВзносамиЗаЗанятыхНаРаботахСДосрочнойПенсией КАК ОблагаетсяВзносамиЗаЗанятыхНаРаботахСДосрочнойПенсией
		|ПОМЕСТИТЬ ВТ_НачисленияПоИФ
		|ИЗ
		|	ВТ_Сотрудники КАК ВТ_Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.БУОсновныеНачисления КАК БУОсновныеНачисления
		|		ПО ВТ_Сотрудники.Сотрудник = БУОсновныеНачисления.Сотрудник
		|ГДЕ
		|	БУОсновныеНачисления.ПериодДействияНачало <= &ДатаКон
		|	И БУОсновныеНачисления.ПериодДействияКонец >= &ДатаНач
		|	И БУОсновныеНачисления.ВидРасчета В(&СпВР)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	БУДополнительныеНачисления.Сотрудник,
		|	НАЧАЛОПЕРИОДА(БУДополнительныеНачисления.ПериодРегистрации, МЕСЯЦ),
		|	БУДополнительныеНачисления.ВидРасчета,
		|	БУДополнительныеНачисления.Результат,
		|	БУДополнительныеНачисления.ПериодРегистрации,
		|	NULL,
		|	БУДополнительныеНачисления.КОСГУ,
		|	БУДополнительныеНачисления.СтатьяФинансирования,
		|	БУДополнительныеНачисления.СтатьяРасходов
		//|	БУДополнительныеНачисления.КодДоходаЕСН,
		//|	БУДополнительныеНачисления.ОблагаетсяВзносамиЗаЗанятыхНаРаботахСДосрочнойПенсией
		|ИЗ
		|	ВТ_Сотрудники КАК ВТ_Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.БУДополнительныеНачисления КАК БУДополнительныеНачисления
		|		ПО ВТ_Сотрудники.Сотрудник = БУДополнительныеНачисления.Сотрудник
		|ГДЕ
		|	БУДополнительныеНачисления.ПериодРегистрации <= &ДатаКон
		|	И БУДополнительныеНачисления.ПериодРегистрации >= &ДатаНач
		|	И БУДополнительныеНачисления.ВидРасчета В(&СпВР)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НачисленияПоИФ.НачалоПериода КАК НачалоПериода,
		|	СУММА(ВТ_НачисленияПоИФ.Результат) КАК Результат,
		|	ВТ_НачисленияПоИФ.КОСГУ КАК КОСГУ,
		|	ВТ_НачисленияПоИФ.СтатьяФинансирования КАК СтатьяФинансирования,
		|	ВТ_НачисленияПоИФ.СтатьяРасходов
		//|	ВТ_НачисленияПоИФ.КодДоходаЕСН,
		//|	ВТ_НачисленияПоИФ.ОблагаетсяВзносамиЗаЗанятыхНаРаботахСДосрочнойПенсией
		|ИЗ
		|	ВТ_НачисленияПоИФ КАК ВТ_НачисленияПоИФ
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_НачисленияПоИФ.НачалоПериода,
		|	ВТ_НачисленияПоИФ.КОСГУ,
		|	ВТ_НачисленияПоИФ.СтатьяФинансирования,
		|	ВТ_НачисленияПоИФ.СтатьяРасходов
		//|	ВТ_НачисленияПоИФ.КодДоходаЕСН,
		//|	ВТ_НачисленияПоИФ.ОблагаетсяВзносамиЗаЗанятыхНаРаботахСДосрочнойПенсией
		|
		|УПОРЯДОЧИТЬ ПО
		|	НачалоПериода,
		|	КОСГУ,
		|	СтатьяФинансирования";
		
		Запрос.УстановитьПараметр("Физлицо",ДокументСЗ.Сотрудник.Физлицо);
		Запрос.УстановитьПараметр("ДатаНач",НачалоМесяца(ДокументСЗ.ПериодРасчетаСреднегоЗаработкаНачало));
		Запрос.УстановитьПараметр("ДатаКон",ДокументСЗ.ПериодРасчетаСреднегоЗаработкаОкончание);
		Запрос.УстановитьПараметр("Организация",ДокументСЗ.Организация);
		Запрос.УстановитьПараметр("СпВР",СпВР);
		Запрос.УстановитьПараметр("ВыбСотрудник",ДокументСЗ.Сотрудник);
		Запрос.УстановитьПараметр("ВнутреннееСовместительство",Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
		Запрос.УстановитьПараметр("ДатаПриемаВыбСотр",ДокументСЗ.Сотрудник.ДатаПриемаНаРаботу);
		Запрос.УстановитьПараметр("ДатаУвольненияВыбСотр",ДокументСЗ.Сотрудник.ДатаУвольнения);
		
		Попытка
			Результат = Запрос.Выполнить();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;	
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			//Добавим в табличную часть заработок внутренних совместителей
			НоваяСтрока = ТЧ.Добавить(); 
			НоваяСтрока.БазовыйПериодНачало	= Выборка.НачалоПериода;
			НоваяСтрока.БазовыйПериодКонец  = КонецМесяца(Выборка.НачалоПериода);
			НоваяСтрока.КОСГУ = Выборка.КОСГУ;
			НоваяСтрока.СтатьяФинансирования = Выборка.СтатьяФинансирования;
			НоваяСтрока.СтатьяРасходов = Выборка.СтатьяРасходов;
			НоваяСтрока.Результат = Выборка.Результат;
			//НоваяСтрока.КодДоходаСтраховыхВзносов = Выборка.КодДоходаЕСН;
			//НоваяСтрока.ОблагаетсяВзносамиЗаЗанятыхНаРаботахСДосрочнойПенсией = Выборка.ОблагаетсяВзносамиЗаЗанятыхНаРаботахСДосрочнойПенсией;
			
		КонецЦикла;
		
	КонецПроцедуры	//РассчитатьСреднийПоИФ
	
// Функция ПроверитьДляРаспределенияНачисленияПоИФ(ДокументСЗ) экспорт
// Проверка на вызов стандартной процедуры РаспределитьНачисленияПоИсточникамФинансирования
// в документах НачислениеОтпуска и ОплатаПоСреднему.
// Если в ТЧ.Начисления есть строки СТОРНО или ВИД РАСЧЕТА НЕ ОТПУСКА/КОММАНДИРОВКИ (т.е. все их разновидности),
// то требуется запустить сначала стандартное распределение, а потом нетиповое
// (чтобы сохранить распределения сторно-записей и определенных видов расчета - т.к. они не распределяются по ИФ).
// Если в ТЧ.Начисления все записи положительные и являются ОТПУСКОМ/КОММАНДИРОВКОЙ (их разновидностями),
// то типовую обработку запускать не надо.
	Функция ПроверитьДляРаспределенияНачисленияПоИФ(ДокументСЗ) экспорт
		СпВР = СписокВидовОтклоненийДляРаспределенияПоИФ(ДокументСЗ);
		Для Каждого Строка Из ДокументСЗ.Начисления Цикл
			//Если (СпВР.НайтиПоЗначению(Строка.ВидРасчета) <> неопределено) 
			//	ИЛИ (Строка.Результат < 0) Тогда
			Если (СпВР.НайтиПоЗначению(Строка.ВидРасчета) = неопределено)
				ИЛИ (Строка.Сторно) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		Возврат Ложь;
	КонецФункции
   	
	// Процедура РаспределитьНачисленияПоИФ(ДокументСЗ) экспорт
	// Используется для распределения по ИФ в документах 
	// НачислениеОтпускаРаботникам, ОплатаПоСреднемуЗаработку, РасчетПриУвольнении
	// ТЗ_СотрудникИФ - Сотрудник и его источник финансирования, график работы, вредность должности. 
	// Если вид расчета (отпуск, по среднему, компенсация и т.д.) не распределяется по базе, то используем данные этой таблицы.
	Процедура РаспределитьНачисленияПоИФ(ДокументСЗ) экспорт
		
		Если ТипЗнч(ДокументСЗ.Ссылка) = Тип("ДокументСсылка.НачислениеОтпускаРаботникамОрганизаций") Тогда
			ДатаНачалаСобытия = ДокументСЗ.ДатаНачалаСобытия;
		ИначеЕсли ТипЗнч(ДокументСЗ.Ссылка) = Тип("ДокументСсылка.ОплатаПоСреднемуЗаработку") Тогда	
			ДатаНачалаСобытия = ДокументСЗ.ДатаНачалаСобытия;
		ИначеЕсли ТипЗнч(ДокументСЗ.Ссылка) = Тип("ДокументСсылка.РасчетПриУвольненииРаботникаОрганизаций") Тогда	
			ДатаНачалаСобытия = ДокументСЗ.ДатаУвольнения;
		КонецЕсли;
		
		//Определим ИФ по сотруднику
		//Требуется, если не распределяем по долям
		Запрос = новый запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РаботникиОрганизацийСрезПоследних.Сотрудник,
		|	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо,
		|	РаботникиОрганизацийСрезПоследних.ГрафикРаботы,
		|	РаботникиОрганизацийСрезПоследних.Должность.ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией как ОблагаетсяВзносамиЗаЗанятыхНаРаботахСДосрочнойПенсией,
		|	УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчетеСрезПоследних.СтатьяФинансирования,
		|	УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчетеСрезПоследних.СтатьяРасходов
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|			&ДатаНачалаСобытия,
		|			Организация = &Организация
		|				И Сотрудник = &Сотрудник) КАК РаботникиОрганизацийСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете.СрезПоследних КАК УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчетеСрезПоследних
		|		ПО РаботникиОрганизацийСрезПоследних.Сотрудник = УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчетеСрезПоследних.Сотрудник";
		
		Запрос.УстановитьПараметр("Сотрудник",ДокументСЗ.Сотрудник);
		Запрос.УстановитьПараметр("ДатаНачалаСобытия",ДатаНачалаСобытия);
		Запрос.УстановитьПараметр("Организация",ДокументСЗ.Организация);
		
		Попытка
			Результат = Запрос.Выполнить();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;	
		
		ТЗ_СотрудникИФ = Результат.Выгрузить();
		
		СпВР = СписокВидовОтклоненийДляРаспределенияПоИФ(ДокументСЗ);

		ТЗ_па_РасчетСреднегоПоИФ = новый ТаблицаЗначений;
		ТЗ_па_РасчетСреднегоПоИФ = ДокументСЗ.па_РасчетСреднегоПоИФ.Выгрузить();
		
		Если ТЗ_па_РасчетСреднегоПоИФ.Количество()=0 Тогда
			Предупреждение("Не данных для распределения по ИФ. Не заполнена табличная часть РасчетСреднегоПоИФ!");
		КонецЕсли;	
		
		//ТЗ_па_РасчетСреднегоПоИФ.Свернуть("КОСГУ,КодДоходаСтраховыхВзносов,СтатьяРасходов,ОблагаетсяВзносамиЗаЗанятыхНаРаботахСДосрочнойПенсией,СтатьяФинансирования", "Результат");
		ТЗ_па_РасчетСреднегоПоИФ.Свернуть("КОСГУ,СтатьяРасходов,СтатьяФинансирования", "Результат");
		Сч = 0;
		ОбщаяДоля = 0;
		ПоследняяСтрока = ТЗ_па_РасчетСреднегоПоИФ.Количество();
		ВсегоНачислено = ТЗ_па_РасчетСреднегоПоИФ.Итог("Результат");
		ТЗ_па_РасчетСреднегоПоИФ.Колонки.Добавить("Доля");
		Для Каждого ТекСтрока Из ТЗ_па_РасчетСреднегоПоИФ Цикл
			Сч = Сч+1;
			Если Сч = ПоследняяСтрока Тогда
				ТекСтрока.Доля = 1 - ОбщаяДоля;
			Иначе
				ТекСтрока.Доля = ТекСтрока.Результат/ВсегоНачислено;
				ОбщаяДоля = ОбщаяДоля + ТекСтрока.Доля;
			КонецЕсли;	
		КонецЦикла;	
		Сч = 0;
		Пока Сч < ДокументСЗ.НачисленияПоИФ.Количество() Цикл
		    Строка = ДокументСЗ.НачисленияПоИФ[Сч];
			Если ((СпВР.Количество() = 0) ИЛИ ((СпВР.НайтиПоЗначению(Строка.ВидРасчета) <> неопределено)) 
				И (Строка.Результат > 0)) Тогда
				ДокументСЗ.НачисленияПоИФ.Удалить(Строка);
			Иначе
				Сч = Сч + 1;
			КонецЕсли
		КонецЦикла;
		КолВоНачислений = ДокументСЗ.Начисления.Количество();
		Для Каждого ТекСтрокаНачисление Из ДокументСЗ.Начисления Цикл
			//Распределять будем только положительные суммы по определенным видам расчета из списка:
			//Отпуска, компенсации, коммандировки
			//Сторно-записи оставим типовыми, т.к. они не распределяются
			//Если ((ТекСтрокаНачисление.Результат > 0) ИЛИ (СпВР.Количество() = 0)) 
			Если ((НЕ ТекСтрокаНачисление.Сторно) ИЛИ (СпВР.Количество() = 0)) 
				И ((СпВР.НайтиПоЗначению(ТекСтрокаНачисление.ВидРасчета)  <> неопределено) ИЛИ (СпВР.Количество() = 0)) Тогда
				Если ТекСтрокаНачисление.ВидРасчета.СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВРеглУчетеНачислений.КакБазовыеНачисления Тогда 
					
					// Распределяем по ИФ
					
					Сч = 0;
					ОбщаяСумма = ТекСтрокаНачисление.Результат;
					Для Каждого Доля Из ТЗ_па_РасчетСреднегоПоИФ Цикл
					  	НоваяСтрока = ДокументСЗ.НачисленияПоИФ.Добавить();
					  	НоваяСтрока.Сотрудник = ДокументСЗ.Сотрудник;
						НоваяСтрока.ФизЛицо = ДокументСЗ.ФизЛицо;
						НоваяСтрока.ВидРасчета = ТекСтрокаНачисление.ВидРасчета;
						Если ТипЗнч(ДокументСЗ.Ссылка) <> Тип("ДокументСсылка.РасчетПриУвольненииРаботникаОрганизаций") Тогда
							///????????
							НоваяСтрока.ПериодДействияНачало = ТекСтрокаНачисление.ДатаНачала;
							НоваяСтрока.ПериодДействияКонец = ТекСтрокаНачисление.ДатаОкончания;
							НоваяСтрока.ПодразделениеОрганизации = ТекСтрокаНачисление.ПодразделениеОрганизации;
						КонецЕсли;
						//НоваяСтрока.БазовыйПериодНачало = ??????????????????;
						//НоваяСтрока.БазовыйПериодКонец = ??????????????????;
						//НоваяСтрока.Сторно = ТекСтрокаНачисление.Сторно;????????????????
						
						//ГрафикРаботы странно заполняется типовыми средствами
						//Где-то ставится график, а где-то Сотрудник
						НоваяСтрока.ГрафикРаботы 	 = ТЗ_СотрудникИФ[0].ГрафикРаботы;  //******
						НоваяСтрока.ВидУчетаВремени  = Перечисления.ВидыУчетаВремени.ПоДням;
						//НоваяСтрока.КодДоходаЕСН = Доля.КодДоходаСтраховыхВзносов;
						НоваяСтрока.КодДоходаЕСН 	 = ТекСтрокаНачисление.ВидРасчета.КодДоходаСтраховыеВзносы;
						
						НоваяСтрока.КОСГУ = Доля.КОСГУ;
						НоваяСтрока.СтатьяФинансирования = Доля.СтатьяФинансирования;
						НоваяСтрока.СтатьяРасходов = Доля.СтатьяРасходов;
						//НоваяСтрока.ОблагаетсяПоДополнительномуТарифу ??????????????????
						//НоваяСтрока.ОблагаетсяВзносамиНаДоплатуКПенсииШахтерам ??????????????????
						//НоваяСтрока.ЯвляетсяДоходомЧленаЭкипажаСуднаПодФлагомРФ ??????????????????
						//НоваяСтрока.ЯвляетсяДоходомФармацевта ??????????????????
						//НоваяСтрока.ОблагаетсяВзносамиЗаЗанятыхНаРаботахСДосрочнойПенсией = Доля.ОблагаетсяВзносамиЗаЗанятыхНаРаботахСДосрочнойПенсией;
						
						НоваяСтрока.ОблагаетсяВзносамиЗаЗанятыхНаРаботахСДосрочнойПенсией = ТЗ_СотрудникИФ[0].ОблагаетсяВзносамиЗаЗанятыхНаРаботахСДосрочнойПенсией;
						
						Сч = Сч + 1;
						Если Сч = ПоследняяСтрока Тогда
							НоваяСтрока.Результат = ОбщаяСумма;
						Иначе
							НоваяСтрока.Результат = Окр(ТекСтрокаНачисление.Результат * Доля.Доля, 2);
							ОбщаяСумма = ОбщаяСумма - НоваяСтрока.Результат;
						КонецЕсли;	
						Если(НоваяСтрока.Результат = 0) Тогда
						  	ДокументСЗ.НачисленияПоИФ.Удалить(НоваяСтрока);
					    КонецЕсли;
					КонецЦикла;	
				ИначеЕсли ТекСтрокаНачисление.ВидРасчета.СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВРеглУчетеНачислений.КакЗаданоНаНачалоСобытия Тогда 
					
					// ИФ по данным сотрудника
					НоваяСтрока = ДокументСЗ.НачисленияПоИФ.Добавить();
					НоваяСтрока.Сотрудник 			 = ДокументСЗ.Сотрудник;
					НоваяСтрока.Физлицо   			 = ДокументСЗ.Сотрудник.Физлицо;
					
					НоваяСтрока.ВидРасчета 			 = ТекСтрокаНачисление.ВидРасчета;
					НоваяСтрока.ПериодДействияНачало = ТекСтрокаНачисление.ДатаНачала;
					НоваяСтрока.ПериодДействияКонец  = ТекСтрокаНачисление.ДатаОкончания;
					//НоваяСтрока.БазовыйПериодНачало  = ТекСтрокаНачисление.ДатаНачала;
					//НоваяСтрока.БазовыйПериодКонец   = ТекСтрокаНачисление.ДатаОкончания;
					НоваяСтрока.ПодразделениеОрганизации = ТекСтрокаНачисление.ПодразделениеОрганизации;
					НоваяСтрока.КодДоходаЕСН 		 = ТекСтрокаНачисление.ВидРасчета.КодДоходаСтраховыеВзносы;  //**********
					
					Если ЗначениеЗаполнено(ТЗ_СотрудникИФ[0].СтатьяФинансирования) Тогда
						НоваяСтрока.СтатьяФинансирования = ТЗ_СотрудникИФ[0].СтатьяФинансирования;
					Иначе //по умолчанию для организации
						НоваяСтрока.СтатьяРасходов	 = ДокументСЗ.Организация.СтатьяФинансирования;
					КонецЕсли;	
					Если ЗначениеЗаполнено(ТЗ_СотрудникИФ[0].СтатьяРасходов) Тогда
						НоваяСтрока.СтатьяРасходов	 = ТЗ_СотрудникИФ[0].СтатьяРасходов;
					Иначе  //по умолчанию для организации
						НоваяСтрока.СтатьяРасходов	 = ДокументСЗ.Организация.СтатьяРасходов;
					КонецЕсли;	
					НоваяСтрока.КОСГУ  				 = Справочники.КОСГУ.КОСГУ211;
					
					НоваяСтрока.ГрафикРаботы 		 = ТЗ_СотрудникИФ[0].ГрафикРаботы;  //******
					НоваяСтрока.ВидУчетаВремени 	 = Перечисления.ВидыУчетаВремени.ПоДням;
					
					НоваяСтрока.ОблагаетсяВзносамиЗаЗанятыхНаРаботахСДосрочнойПенсией = ТЗ_СотрудникИФ[0].ОблагаетсяВзносамиЗаЗанятыхНаРаботахСДосрочнойПенсией;
					
					НоваяСтрока.Результат		 = ТекСтрокаНачисление.Результат; 
					
				ИначеЕсли ТекСтрокаНачисление.ВидРасчета.СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВРеглУчетеНачислений.КакЗаданоВидуРасчета Тогда 					
					
					// По заданной проводке
					НоваяСтрока = ДокументСЗ.НачисленияПоИФ.Добавить();
					НоваяСтрока.Сотрудник 			 = ДокументСЗ.Сотрудник;
					НоваяСтрока.Физлицо   			 = ДокументСЗ.Сотрудник.Физлицо;
					НоваяСтрока.КОСГУ  				 = ТекСтрокаНачисление.ВидРасчета.КОСГУ;
					НоваяСтрока.СтатьяФинансирования = ТекСтрокаНачисление.ВидРасчета.СтатьяФинансирования;
					НоваяСтрока.СтатьяРасходов		 = ТекСтрокаНачисление.ВидРасчета.СтатьяРасходов;
					
					НоваяСтрока.ВидРасчета 			 = ТекСтрокаНачисление.ВидРасчета;
					НоваяСтрока.ПериодДействияНачало = ТекСтрокаНачисление.ДатаНачала;
					НоваяСтрока.ПериодДействияКонец  = ТекСтрокаНачисление.ДатаОкончания;
					//НоваяСтрока.БазовыйПериодНачало  = ТекСтрокаНачисление.ДатаНачала;
					//НоваяСтрока.БазовыйПериодКонец   = ТекСтрокаНачисление.ДатаОкончания;
					НоваяСтрока.ПодразделениеОрганизации = ТекСтрокаНачисление.ПодразделениеОрганизации;
					НоваяСтрока.КодДоходаЕСН 		 = ТекСтрокаНачисление.ВидРасчета.КодДоходаСтраховыеВзносы;  //**********
					
					НоваяСтрока.ГрафикРаботы 		 = ТЗ_СотрудникИФ[0].ГрафикРаботы;  //******
					НоваяСтрока.ВидУчетаВремени 	 = Перечисления.ВидыУчетаВремени.ПоДням;
			
					НоваяСтрока.ОблагаетсяВзносамиЗаЗанятыхНаРаботахСДосрочнойПенсией = ТЗ_СотрудникИФ[0].ОблагаетсяВзносамиЗаЗанятыхНаРаботахСДосрочнойПенсией;
					
					НоваяСтрока.Результат		 = ТекСтрокаНачисление.Результат; 
					
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
		
	КонецПроцедуры	//РаспределитьНачисленияПоИФ
	
	Процедура РаспределитьУдержанияПоИФ(ДокументСЗ) экспорт
		
		Запрос = новый запрос;
		//Распределить исполнительные листы по ИФ основного сотрудника
		//Заполнить ТЧ УдержанияПоИФ
		Для Каждого СтрокаТЧ Из ДокументСЗ.УдержанияПоИФ Цикл
			Если (СтрокаТЧ.ДокументОснование <> Документы.ИсполнительныйЛист.ПустаяСсылка()) ИЛИ (СтрокаТЧ.ВидРасчета = ПланыВидовРасчета.УдержанияОрганизаций.ИЛПроцентомБезБЛ) Тогда
				//Определяем ист. финансирования
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	МАКСИМУМ(УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчетеСрезПоследних.СтатьяФинансирования) КАК СтатьяФинансирования
				|ИЗ
				|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
				|			&Дата,
				|				Сотрудник.ФизЛицо = &ФизЛицо И Организация = &Организация И Сотрудник.ВидЗанятости <> &ВнСовм) КАК РаботникиОрганизацийСрезПоследних
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете.СрезПоследних КАК УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчетеСрезПоследних
				|	ПО РаботникиОрганизацийСрезПоследних.Сотрудник = УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчетеСрезПоследних.Сотрудник";
				Запрос.УстановитьПараметр("Дата",ДокументСЗ.Дата);
				Запрос.УстановитьПараметр("Организация",ДокументСЗ.Организация);
				Запрос.УстановитьПараметр("ФизЛицо", СтрокаТЧ.ФизЛицо);
				Запрос.УстановитьПараметр("ВнСовм",Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
				Попытка
					Результат = Запрос.Выполнить();
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;	
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				//Обновить
				
				СтрокаТЧ.СтатьяФинансирования = Выборка.СтатьяФинансирования;
			  	СтрокаТЧ.КОСГУ = Справочники.КОСГУ.КОСГУ211;
			КонецЕсли;
		КонецЦикла;	
		
	КонецПроцедуры	
	
	//Процедура РаспределитьНДФЛПоИФ(ДокументСЗ, ТЧ_НДФЛ, ТЧ_НДФЛПоИФ, ТЧ_НачисленияПоИФ) экспорт
	//НЕ РАБОТАЕТ, НЕ ИСПОЛЬЗУЕТСЯ
	Процедура РаспределитьНДФЛПоИФ(ДокументСЗ) экспорт
		
		ДокументСЗ.НДФЛПоИФ.Очистить();
		
		//Выберем из ТЧ_НачисленияПоИФ все источники и расчитаем долю для распределения НДФЛ
		
		ТЗ_ИФ = новый ТаблицаЗначений;
		ТЗ_ИФ = ДокументСЗ.НачисленияПоИФ.Выгрузить();
		ТЗ_ИФ.Свернуть("ФизЛицо, СтатьяФинансирования, КОСГУ","Результат");
		//по подразделению сворачиват не будет, т.к. сотрудник должен быть только в одном подразделении
		//по периодам действия тоже не будем сворачивать, т.к. при переходящих отпусках НДФЛ будет фиксироваться в текущем месяце
		
		Сч = 0;
		ОбщаяДоля = 0;
		ПоследняяСтрока = ТЗ_ИФ.Количество();
		ВсегоНачислено = ТЗ_ИФ.Итог("Результат");
		ТЗ_ИФ.Колонки.Добавить("Доля");
		Для Каждого ТекСтрока Из ТЗ_ИФ Цикл
			Сч = Сч+1;
			Если Сч = ПоследняяСтрока Тогда
				ТекСтрока.Доля = 1 - ОбщаяДоля;
			Иначе
				ТекСтрока.Доля = ТекСтрока.Результат/ВсегоНачислено;
				ОбщаяДоля = ОбщаяДоля + ТекСтрока.Доля;
			КонецЕсли;	
		КонецЦикла;	
		
		//Распределим по ИФ НДФЛ
		
		ТЗ_НДФЛ = новый ТаблицаЗначений;
		ТЗ_НДФЛ = ДокументСЗ.НДФЛ.Выгрузить();
		ТЗ_НДФЛ.Свернуть("МесяцНалоговогоПериода, ФизЛицо, ПодразделениеОрганизации","Налог");
		Для каждого ТекСтрокаНДФЛ Из ТЗ_НДФЛ Цикл
			Сч = 0;
			РаспределеннаяСумма = 0;
			ПоследняяСтрока = ТЗ_ИФ.Количество(); 
			Для каждого ТекСтрокаТЗ_ИФ Из ТЗ_ИФ Цикл
				Сч = Сч + 1;
				НоваяСтрока = ДокументСЗ.НДФЛПоИФ.Добавить();
				НоваяСтрока.Физлицо   			 = ТекСтрокаТЗ_ИФ.ФизЛицо;
				НоваяСтрока.КОСГУ  				 = ТекСтрокаТЗ_ИФ.КОСГУ;
				НоваяСтрока.СтатьяФинансирования = ТекСтрокаТЗ_ИФ.СтатьяФинансирования;
				
				НоваяСтрока.ПодразделениеОрганизации = ТекСтрокаНДФЛ.ПодразделениеОрганизации;
				НоваяСтрока.МесяцНалоговогоПериода   = ТекСтрокаНДФЛ.МесяцНалоговогоПериода;
				
				//определим ставку НДФЛ 
				//ЗапросНДФЛ = новый запрос;
				//ЗапросНДФЛ.Текст = 
				//"ВЫБРАТЬ
				//|	СтатусФизЛицКакНалогоплательщиковНДФЛСрезПоследних.ФизЛицо,
				//|	СтатусФизЛицКакНалогоплательщиковНДФЛСрезПоследних.Статус
				//|ИЗ
				//|	РегистрСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ.СрезПоследних(&МесяцНалоговогоПериода, ФизЛицо = &ФизЛицо) КАК СтатусФизЛицКакНалогоплательщиковНДФЛСрезПоследних"$
				//
				//ЗапросНДФЛ.УстановитьПараметр("МесяцНалоговогоПериода",ТекСтрокаНДФЛ.МесяцНалоговогоПериода);
				//ЗапросНДФЛ.УстановитьПараметр("ФизЛицо",ТекСтрокаТЗ_ИФ.ФизЛицо);
				//
				//Попытка
				//	Результат = ЗапросНДФЛ.Выполнить();
				//Исключение
				//	Сообщить(ОписаниеОшибки());
				//КонецПопытки;	
				//Выборка = Результат.Выбрать();
				//Если Выборка.Следующий() Тогда
				//	Если Выборка.Статус = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент Тогда //30%
				//		НоваяСтрока.СтавкаНалогообложенияРезидента = Перечисления.НДФЛСтавки.;
				//	Иначе  //13%
				НоваяСтрока.СтавкаНалогообложенияРезидента = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13;
				//	КонецЕсли;
				//КонецЕсли;
				
				Если Сч <> ПоследняяСтрока Тогда
					СуммаРаспределения = ОКР(ТекСтрокаНДФЛ.Налог*ТекСтрокаТЗ_ИФ.Доля,0);
					НоваяСтрока.Налог = СуммаРаспределения;
					РаспределеннаяСумма = РаспределеннаяСумма + СуммаРаспределения;
				Иначе
					//Для точности расчета Последнюю долю брать не будем, а вычтем расчпределенные суммы из общей суммы распределения
					СуммаРаспределения = ТекСтрокаНДФЛ.Налог - РаспределеннаяСумма;
					НоваяСтрока.Налог = СуммаРаспределения; 
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;
	КонецПроцедуры //РаспределитьНДФЛПоИФ()
	
	
#КонецЕсли
