
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мОрганизация;
Перем мСоответствиеТиповДокументов;
Перем мСоответствиеИменДокументов;

// Диалог настройки периода
Перем мНастройкаПериода;

Перем мРассчитываемыеТаблицы;


Процедура УстановитьЗаголовкиОрганизацийВФорме()
	
	ЭлементыФормы.НадписьОрганизация.Заголовок = ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Организация:");
	
КонецПроцедуры // УстановитьЗаголовкиОрганизацийВФорме()

// Возвращает массив отмеченных строк, соответствующих установленному отбору
//
// Параметры
//  ПредупредитьОНаличииПроведенныхРасчетныхДокументах - Булево - если Истина, дополнительно проверяет на
//														предмет заполненностии проведения расчетного документа
//
// Возвращаемое значение:
//   Массив   - Масиив отмеченных строк, соответствующих установленному отбору
//
Функция ПолучитьМассивОтмеченныхНеявок(ПредупредитьОНаличииПроведенныхРасчетныхДокументах = Ложь)

	МассивОтмеченныхНеявок = Неявки.НайтиСтроки(Новый Структура("Отметка",Истина));
	
	// Соберем информацию о помеченных строках не соответствующих отбору
	МассивОтмеченныхНеявокНеСоответствующихОтбору = Новый Массив;
	
	ЕстьСтрокиСРасчетнымиДокументами = Ложь;
	
	Для каждого СтрокаНеявки Из МассивОтмеченныхНеявок Цикл
	
		Если НЕ ЭлементыФормы.Неявки.ПроверитьСтроку(СтрокаНеявки) Тогда
		
			МассивОтмеченныхНеявокНеСоответствующихОтбору.Добавить(СтрокаНеявки);
			
		ИначеЕсли ПредупредитьОНаличииПроведенныхРасчетныхДокументах И НЕ ЕстьСтрокиСРасчетнымиДокументами 
			И ЗначениеЗаполнено(СтрокаНеявки.РасчетныйДокумент) И СтрокаНеявки.РасчетныйДокумент.Проведен Тогда
			
			ЕстьСтрокиСРасчетнымиДокументами = Истина;
			
		КонецЕсли; 
	
	КонецЦикла; 
	
	// Удалим из массива отобранных строк несоответствующие отбору
	
	Для каждого НеСоответствующаяСтрокаНеявки Из МассивОтмеченныхНеявокНеСоответствующихОтбору Цикл
	
		МассивОтмеченныхНеявок.Удалить(МассивОтмеченныхНеявок.Найти(НеСоответствующаяСтрокаНеявки));
	
	КонецЦикла; 
	
	Если МассивОтмеченныхНеявокНеСоответствующихОтбору.Количество() > 0 ИЛИ ЕстьСтрокиСРасчетнымиДокументами Тогда
	
		ФормаДиалогВопрос = ПолучитьОбщуюФорму("ДиалогВопрос");
		ФормаДиалогВопрос.Заголовок = "Внимание!";
		
		ТекстВопроса = "";
		
		Если МассивОтмеченныхНеявокНеСоответствующихОтбору.Количество() > 0 Тогда
		
			ТекстВопроса = ?(ЕстьСтрокиСРасчетнымиДокументами, "1. ", "") +
				"В таблице неявок есть отмеченные строки, которые не выведены в табличную часть формы (в соответствии с установленным отбором) и не будут участвовать в обработке.";
		
		КонецЕсли;
			
		Если ЕстьСтрокиСРасчетнымиДокументами Тогда
		
			ТекстВопроса = ТекстВопроса + ?(ПустаяСтрока(ТекстВопроса),"", Символы.ПС + Символы.ПС + "2. ") +
				"Среди выбранных строк есть строки, уже содержащие проведенный расчетный документ.";
		
		КонецЕсли; 
					
		ТекстВопроса = ТекстВопроса + Символы.ПС + Символы.ПС + "Продолжить?";
		
		ФормаДиалогВопрос.ЭлементыФормы.НадписьТекстВопроса.Заголовок = ТекстВопроса;
		
		ФормаДиалогВопрос.ЭлементыФормы.КнопкаДействие1.Заголовок = "Да, продолжить";
		ФормаДиалогВопрос.ЭлементыФормы.КнопкаДействие2.Заголовок = "Нет, отменить";
		Результат = ФормаДиалогВопрос.ОткрытьМодально();

		Если Результат <> "1" Тогда
	
			МассивОтмеченныхНеявок.Очистить();
	
		КонецЕсли; 
	
	КонецЕсли; 
	
	Возврат МассивОтмеченныхНеявок;

КонецФункции // ПолучитьМассивОтмеченныхНеявок()

// Вызывает заполнение (обновление) таблицы неявок, отключает установленный отбор
// Если после автозаполнения в таблице есть строки, позиционирует выбор на первой из них
//
// Параметры
//  Нет
//
Процедура ЗаполнитьТаблицуНеявок()

	Если НЕ Автозаполнение() Тогда
	
		Возврат;
	
	КонецЕсли;
	
	// Если в форме использовался отбор строк - отключим его
	ЭлементыФормы.Неявки.ОтборСтрок.Сбросить();
	
	Если Неявки.Количество() > 0 Тогда
		
		ЭлементыФормы.Неявки.ТекущаяСтрока = Неявки[0];
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТаблицуНеявок()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(Метаданные.Документы.ОтпускаОрганизаций.Синоним);
	СписокТипов.Добавить(Метаданные.Документы.КомандировкиОрганизаций.Синоним);
	СписокТипов.Добавить(Метаданные.Документы.НеявкиИБолезниОрганизаций.Синоним);
	мСоответствиеТиповДокументов.Вставить(Метаданные.Документы.ОтпускаОрганизаций.Синоним       , Новый ОписаниеТипов("ДокументСсылка.ОтпускаОрганизаций"));
	мСоответствиеТиповДокументов.Вставить(Метаданные.Документы.КомандировкиОрганизаций.Синоним  , Новый ОписаниеТипов("ДокументСсылка.КомандировкиОрганизаций"));
	мСоответствиеТиповДокументов.Вставить(Метаданные.Документы.НеявкиИБолезниОрганизаций.Синоним, Новый ОписаниеТипов("ДокументСсылка.НеявкиИБолезниОрганизаций"));
	мСоответствиеИменДокументов.Вставить(Метаданные.Документы.ОтпускаОрганизаций.Синоним       , "ОтпускаОрганизаций");
	мСоответствиеИменДокументов.Вставить(Метаданные.Документы.КомандировкиОрганизаций.Синоним  , "КомандировкиОрганизаций");
	мСоответствиеИменДокументов.Вставить(Метаданные.Документы.НеявкиИБолезниОрганизаций.Синоним, "НеявкиИБолезниОрганизаций");
	
	ЭлементыФормы.ТипДокумента.СписокВыбора = СписокТипов;
	
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	Если Не ОтбиратьСобытияПоДокументу Тогда
		
		ДатаНачалаОтбора	= НачалоМесяца(ОбщегоНазначенияЗК.ПолучитьРабочуюДату());
		ДатаОкончанияОтбора	= КонецМесяца(ОбщегоНазначенияЗК.ПолучитьРабочуюДату());
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПериодРегистрации) Тогда
		ПериодРегистрации = НачалоМесяца(ОбщегоНазначенияЗК.ПолучитьРабочуюДату())
	КонецЕсли;
	// Заполним реквизит формы МесяцСтрока.
	МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	Если НЕ ЗначениеЗаполнено(КадровыйДокументОтбора) Тогда
		КадровыйДокументОтбора = Документы.ОтпускаОрганизаций.ПустаяСсылка()
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТипДокумента) Тогда
		ТипДокумента = Метаданные.Документы.ОтпускаОрганизаций.Синоним;
	КонецЕсли;
	
	Если Организация.Пустая() Тогда
		Организация   = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	КонецЕсли;
	
	Если Неявки.Количество() > 0 Тогда
		ЭлементыФормы.Неявки.ТекущаяСтрока = Неявки[0];
	КонецЕсли;
	
	// определяем значения для дальнейшего использования
	
	мОрганизация	= Организация;
	// Установить настройку периода по умолчанию 
	мНастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	
	УстановитьЗаголовкиОрганизацийВФорме();
	
КонецПроцедуры

Процедура ПриПовторномОткрытии(СтандартнаяОбработка)
	Если Не (Организация.Пустая() Или ОтбиратьСобытияПоДокументу И КадровыйДокументОтбора.Пустая()) Тогда
		ЗаполнитьТаблицуНеявок();
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура КоманднаяПанельНеявкиОбновить(Кнопка)
	
	ЗаполнитьТаблицуНеявок();
	
КонецПроцедуры

// Процедура устанавливает пометку у всех строк таблицы (в строках соотвествующих установленному отбору) .
//
Процедура КоманднаяПанельНеявкиУстановитьФлаги(Кнопка)
	
	Для Каждого СтрокаТЧ Из Неявки Цикл
		
		Если ЭлементыФормы.Неявки.ПроверитьСтроку(СтрокаТЧ) Тогда
		
	    	СтрокаТЧ.Отметка = Истина
		
		КонецЕсли; 
		
	КонецЦикла;	
	
КонецПроцедуры

// Процедура снимает пометку у всех строк таблицы (в строках соотвествующих установленному отбору).
//
Процедура КоманднаяПанельНеявкиСнятьфлаги(Кнопка)
	
	Для Каждого СтрокаТЧ Из Неявки Цикл
		
		Если ЭлементыФормы.Неявки.ПроверитьСтроку(СтрокаТЧ) Тогда
		
	    	СтрокаТЧ.Отметка = Ложь
		
		КонецЕсли; 
    	
	КонецЦикла;	
	
КонецПроцедуры

// Инвертирует флаги в табличной части (в строках соотвествующих установленному отбору).
//
Процедура КоманднаяПанельНеявкиИнвертировать(Кнопка)
	
	Для Каждого СтрокаТаблицы Из Неявки Цикл		
		
		Если ЭлементыФормы.Неявки.ПроверитьСтроку(СтрокаТаблицы) Тогда
		
	    	СтрокаТаблицы.Отметка = Не СтрокаТаблицы.Отметка;
		
		КонецЕсли; 
    	
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельНеявкиКадровыйДокумент(Кнопка)
	ТекущаяСтрока = ЭлементыФормы.Неявки.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено И ЗначениеЗаполнено(ТекущаяСтрока.КадровыйДокумент) Тогда
		ТекущаяСтрока.КадровыйДокумент.ПолучитьФорму().Открыть()
	КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанельНеявкиРасчетныйДокумент(Кнопка)
	ТекущаяСтрока = ЭлементыФормы.Неявки.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено И ЗначениеЗаполнено(ТекущаяСтрока.РасчетныйДокумент)  Тогда
		ТекущаяСтрока.РасчетныйДокумент.ПолучитьФорму().Открыть()
	КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанельНеявкиСостоянияРаботников(Кнопка)
	
	ДанныеСтроки = ЭлементыФормы.Неявки.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = РегистрыСведений.СостояниеРаботниковОрганизаций.ПолучитьФормуСписка();
	Форма.Отбор.Сотрудник.Установить(ДанныеСтроки.Сотрудник);
	Если Не Организация.Пустая() Тогда
		Форма.Отбор.Организация.Установить(Организация);
	КонецЕсли;
	Форма.Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ

// Процедура - обработчик события "ПриИзменении" поля ввода "Организация".
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если мОрганизация <> Организация Тогда
		Неявки.Очистить();
	КонецЕсли;
	мОрганизация = Организация;
	
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);

	Если Не (Организация.Пустая() Или ОтбиратьСобытияПоДокументу И КадровыйДокументОтбора.Пустая()) Тогда
		ЗаполнитьТаблицуНеявок();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки настройки периода.
//
Процедура ВыбПериодНажатие(Элемент)
	
	мНастройкаПериода.УстановитьПериод(ДатаНачалаОтбора, КонецДня(ДатаОкончанияОтбора));
	
	Если мНастройкаПериода.Редактировать() Тогда
		ДатаНачалаОтбора	= мНастройкаПериода.ПолучитьДатуНачала();
		ДатаОкончанияОтбора	= мНастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
	
КонецПроцедуры // ВыбПериодНажатие()

Процедура ТипДокументаПриИзменении(Элемент)
	ЗначениеВыбрано = мСоответствиеТиповДокументов[Элемент.Значение] <> Неопределено;
	ЭлементыФормы.КадровыйДокумент.ТолькоПросмотр = Не ЗначениеВыбрано;
	Если ЗначениеВыбрано Тогда
		КадровыйДокументОтбора = мСоответствиеТиповДокументов[Элемент.Значение].ПривестиЗначение(КадровыйДокументОтбора);
	Иначе 
		КадровыйДокументОтбора = ""
	КонецЕсли;
КонецПроцедуры

Процедура КадровыйДокументПриИзменении(Элемент)
	Если ОтбиратьСобытияПоДокументу И ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(КадровыйДокументОтбора) Тогда
		ЗаполнитьТаблицуНеявок();
	КонецЕсли;
КонецПроцедуры

Процедура КадровыйДокументНачалоВыбора(Элемент, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Организация) Тогда
		СтандартнаяОбработка = Ложь;
		ФормаВыбора = Документы[мСоответствиеИменДокументов[ТипДокумента]].ПолучитьФормуВыбора(, Элемент, ЭтаФорма);
		Если ЗначениеЗаполнено(Организация) Тогда
			ФормаВыбора.Отбор.Организация.Установить(Организация);
		КонецЕсли;
		ФормаВыбора.НачальноеЗначениеВыбора = КадровыйДокументОтбора;
		ФормаВыбора.Открыть();
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииПриИзменении(Элемент)
	
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, ПериодРегистрации); // ПериодРегистрации изменяем
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации); // привели значение Элемента к правильному представлению
	
КонецПроцедуры

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ПериодРегистрации = ДобавитьМесяц(ПериодРегистрации, Направление); // ПериодРегистрации изменяем
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации); // привели значение Элемента к правильному представлению
	
КонецПроцедуры

// Процедура - обработчик события "Очистка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма);
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
КонецПроцедуры

// Процедура создает документы по пустым строкам табличной части
//
Процедура СоздатьНажатие(Кнопка)
	
	СоздатьДокументы(ПолучитьМассивОтмеченныхНеявок(Истина));	
	
КонецПроцедуры

// Процедура рассчитывает отмеченные документы
//
Процедура РассчитатьНажатие(Кнопка)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	//РассчитатьДокументы(ПолучитьМассивОтмеченныхНеявок());
	мРассчитываемыеТаблицы = Новый Структура("Начисления,РасчетСреднего");
	Для каждого Документ Из ПолучитьМассивОтмеченныхНеявок() Цикл
		РасчетныйДокумент = Документ.РасчетныйДокумент.ПолучитьОбъект();
		Если ТипЗнч(РасчетныйДокумент.Ссылка) = Тип("ДокументСсылка.НачислениеОтпускаРаботникамОрганизаций") 
			ИЛИ ТипЗнч(РасчетныйДокумент.Ссылка) = Тип("ДокументСсылка.ОплатаПоСреднемуЗаработку") Тогда	
			Если ТипЗнч(РасчетныйДокумент.Ссылка) = Тип("ДокументСсылка.НачислениеОтпускаРаботникамОрганизаций") Тогда
				МассивТаблиц = НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ПолучитьМассивТабличныхЧастей(РасчетныйДокумент, "РасчетСреднего");
			ИначеЕсли ТипЗнч(РасчетныйДокумент.Ссылка) = Тип("ДокументСсылка.ОплатаПоСреднемуЗаработку") Тогда	
				МассивТаблиц = ОплатаПоСреднемуЗаработкуПереопределяемый.ПолучитьМассивТабличныхЧастей(РасчетныйДокумент, "РасчетСреднего");
			КонецЕсли;
			Для каждого ТабличнаяЧасть Из МассивТаблиц Цикл
				ТабличнаяЧасть.Очистить();
			КонецЦикла;
			мРассчитываемыеТаблицы.Начисления = Ложь;
			мРассчитываемыеТаблицы.РасчетСреднего = Истина;
			РасчетныйДокумент.Рассчитать(мРассчитываемыеТаблицы);
			//Добавим к заработку основного сотрудника заработок его внутренних совместительств за период расчета
			Если НЕ РасчетныйДокумент.па_НеУчитыватьСовместительство Тогда
				па_ОбщиеФункции.ДобавитьВСреднийЗаработокВнутрСовместителей(РасчетныйДокумент);
			КонецЕсли;	
			па_ОбщиеФункции.РассчитатьСреднийПоИФ(РасчетныйДокумент);
			РасчетныйДокумент.Записать(РежимЗаписиДокумента.Запись);
			Если ТипЗнч(РасчетныйДокумент.Ссылка) = Тип("ДокументСсылка.НачислениеОтпускаРаботникамОрганизаций") Тогда
				МассивТаблиц = НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ПолучитьМассивТабличныхЧастей(РасчетныйДокумент, "РасчетНачислений");
			ИначеЕсли ТипЗнч(РасчетныйДокумент.Ссылка) = Тип("ДокументСсылка.ОплатаПоСреднемуЗаработку") Тогда	
				МассивТаблиц = ОплатаПоСреднемуЗаработкуПереопределяемый.ПолучитьМассивТабличныхЧастей(РасчетныйДокумент, "РасчетНачислений");
			КонецЕсли;
			Для каждого ТабличнаяЧасть Из МассивТаблиц Цикл
				ТабличнаяЧасть.Очистить();
			КонецЦикла;
			мРассчитываемыеТаблицы.Начисления = Истина;
			мРассчитываемыеТаблицы.РасчетСреднего = Ложь;
			РасчетныйДокумент.Рассчитать(мРассчитываемыеТаблицы);
			па_ОбщиеФункции.РаспределитьНачисленияПоИФ(РасчетныйДокумент);
			РасчетныйДокумент.Записать(РежимЗаписиДокумента.Запись);
		Иначе
			//Стандартный расчет
			мРассчитываемыеТаблицы.Начисления = Истина;
			мРассчитываемыеТаблицы.РасчетСреднего = Истина;
			РасчетныйДокумент.Рассчитать(мРассчитываемыеТаблицы);
			РасчетныйДокумент.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецЦикла;
	
	ОбработкаКомментариев.ПоказатьСообщения();

КонецПроцедуры

// Процедура проводит отмеченные документы
//
Процедура ПровестиНажатие(Кнопка)

	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	ПровестиДокументы(ПолучитьМассивОтмеченныхНеявок());	
	ОбработкаКомментариев.ПоказатьСообщения();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ Неявки и ее РЕКВИЗИТОВ 

// Процедура - обработчик события "Выбор" ТЧ
//
Процедура НеявкиВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ФормаРедактированияСтроки = ПолучитьФорму("ФормаДокументов",ЭтаФорма,ВыбраннаяСтрока);
	ЗаполнитьЗначенияСвойств(ФормаРедактированияСтроки,ВыбраннаяСтрока);
	ФормаРедактированияСтроки.Организация = Организация;
	ФормаРедактированияСтроки.ОткрытьМодально();
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" ТЧ
//
Процедура НеявкиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	// Выделим красным цветом дублирующиеся строки.
	Если ДанныеСтроки.ДублирующаясяСтрока Тогда
		ОформлениеСтроки.ЦветТекста  = Новый Цвет(255, 0, 0);
	КонецЕсли;
	
	// При наличии обоих документов покажем стандартный значок для отображения состояния расчетного документа
	ЯчейкаСКартинкой = ОформлениеСтроки.Ячейки.Картинка;
	Если ЗначениеЗаполнено(ДанныеСтроки.РасчетныйДокумент)
		И ЗначениеЗаполнено(ДанныеСтроки.КадровыйДокумент) Тогда
		ЯчейкаСКартинкой.ОтображатьКартинку = Истина;
		ЯчейкаСКартинкой.ИндексКартинки = ?(ДанныеСтроки.РасчетныйДокумент.Проведен, 0, 2);
	Иначе
		ЯчейкаСКартинкой.ОтображатьКартинку = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельНеявкиЗаполнитьБезВн(Кнопка)
	
	//Промавтоматика-ТаняН -->
	Если НЕ Автозаполнение() Тогда
		Возврат;
	КонецЕсли;
	//Удяляем вн. совм
	сч = 0;
	Пока сч < Неявки.Количество() Цикл
		СтрокаТЧ = Неявки[Сч];
		Если СтрокаТЧ.Сотрудник.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
			Неявки.Удалить(СтрокаТЧ);
		Иначе
			сч = сч + 1;
		КонецЕсли;
	КонецЦикла;	
	
	// Если в форме использовался отбор строк - отключим его
	ЭлементыФормы.Неявки.ОтборСтрок.Сбросить();
	
	Если Неявки.Количество() > 0 Тогда
		ЭлементыФормы.Неявки.ТекущаяСтрока = Неявки[0];
	КонецЕсли;
  //Промавтоматика-ТаняН <--

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ОБЪЕКТА 

мНастройкаПериода = Новый НастройкаПериода;
мСоответствиеТиповДокументов = Новый Соответствие;
мСоответствиеИменДокументов = Новый Соответствие;

