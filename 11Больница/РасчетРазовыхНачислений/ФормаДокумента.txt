перем ПоказыватьНижнююПанель;

функция ЗаполнитьДанныеПоСотрудникам(Сотрудник)
	Если (Сотрудник = неопределено) Тогда
		Если Вопрос("Табличная часть будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Нет Тогда
			 возврат ложь;
		КонецЕсли;	
	КонецЕсли;	
	 
	
	//Определим периода работы сотрудников по выбранному подразделению
	Если (Сотрудник <> неопределено)Тогда 
		ФильтрСотрудник = " И РаботникиОрганизацийСрезПоследних.Сотрудник=&Сотрудник "; //**********
		ФильтрСотрудникВТ = " И ВТ_Периоды.Сотрудник=&Сотрудник ";
		ФильтрСотрудникРо = " И РаботникиОрганизаций.Сотрудник=&Сотрудник ";            //**********
	КонецЕсли;
	Запрос = новый запрос;
	Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	РаботникиОрганизацийСрезПоследних.Период КАК ПериодСреза,
	 |	&НачалоПериода КАК Период,
	 |	РаботникиОрганизацийСрезПоследних.Сотрудник КАК Сотрудник,
	 |	РаботникиОрганизацийСрезПоследних.Должность,
	 |	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации,
	 |	РаботникиОрганизацийСрезПоследних.ПервичныйДокумент,
	 |	УчетСрезПоследних.СтатьяФинансирования,
	 |	РаботникиОрганизацийСрезПоследних.ГрафикРаботы
	 |ПОМЕСТИТЬ ВТ_Периоды
	 |ИЗ
	 |	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&НачалоПериода, Организация = &Организация) КАК РаботникиОрганизацийСрезПоследних
	 |  ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете.СрезПоследних(&НачалоПериода, Организация = &Организация) КАК УчетСрезПоследних
	 |  ПО РаботникиОрганизацийСрезПоследних.Сотрудник=УчетСрезПоследних.Сотрудник И РаботникиОрганизацийСрезПоследних.Организация=УчетСрезПоследних.Организация  {И РаботникиОрганизацийСрезПоследних.Период=УчетСрезПоследних.Период}
	 |ГДЕ
	 |	НЕ РаботникиОрганизацийСрезПоследних.ПервичныйДокумент.Ссылка ССЫЛКА Документ.УвольнениеИзОрганизаций 
	 | " + ФильтрСотрудник + "
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	РаботникиОрганизацийСрезПоследних.Период,
	 |	&КонецПериода,
	 |	РаботникиОрганизацийСрезПоследних.Сотрудник,
	 |	РаботникиОрганизацийСрезПоследних.Должность,
	 |	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации,
	 |	РаботникиОрганизацийСрезПоследних.ПервичныйДокумент,
	 |	УчетСрезПоследних.СтатьяФинансирования,
	 |	РаботникиОрганизацийСрезПоследних.ГрафикРаботы
	 |ИЗ
	 |	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&КонецПериода, Организация = &Организация) КАК РаботникиОрганизацийСрезПоследних
	 |  ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете.СрезПоследних(&КонецПериода, Организация = &Организация) КАК УчетСрезПоследних
	 |  ПО РаботникиОрганизацийСрезПоследних.Сотрудник=УчетСрезПоследних.Сотрудник И РаботникиОрганизацийСрезПоследних.Организация=УчетСрезПоследних.Организация  {И РаботникиОрганизацийСрезПоследних.Период=УчетСрезПоследних.Период}
	 |ГДЕ
	 |	НЕ РаботникиОрганизацийСрезПоследних.ПервичныйДокумент.Ссылка ССЫЛКА Документ.УвольнениеИзОрганизаций
	 | " + ФильтрСотрудник + "
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	NULL,
	 |	РаботникиОрганизаций.Период,
	 |	РаботникиОрганизаций.Сотрудник,
	 |	РаботникиОрганизаций.Должность,
	 |	РаботникиОрганизаций.ПодразделениеОрганизации,
	 |	РаботникиОрганизаций.ПервичныйДокумент,
	 |	Учет.СтатьяФинансирования,
	 |	РаботникиОрганизаций.ГрафикРаботы
	 |ИЗ
	 |	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	 |  ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете.СрезПоследних(&КонецПериода, Организация = &Организация) КАК Учет
	 |  ПО РаботникиОрганизаций.Сотрудник=Учет.Сотрудник И РаботникиОрганизаций.Организация=Учет.Организация  
	 |  {И РаботникиОрганизаций.Период=Учет.Период}
	 |ГДЕ
	 |	РаботникиОрганизаций.Период > &НачалоПериода
	 |	И РаботникиОрганизаций.Период < &КонецПериода
	 | " + ФильтрСотрудникРо  + "
	 |{УПОРЯДОЧИТЬ ПО
	 |	Сотрудник.*,
	 |	Период}
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ВТ_Периоды.Период КАК Период,
	 |	МИНИМУМ(ВТ_ПериодыДляСвязи.Период) КАК ПериодСледующий,
	 |	ВТ_Периоды.Сотрудник КАК Сотрудник,
	 |	ВТ_Периоды.Должность,
	 |	ВТ_Периоды.ПодразделениеОрганизации,
	 |	ВТ_Периоды.СтатьяФинансирования,
	 |	ВТ_Периоды.ГрафикРаботы
	 |ИЗ
	 |	ВТ_Периоды КАК ВТ_Периоды
	 |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Периоды КАК ВТ_ПериодыДляСвязи
	 |		ПО ВТ_Периоды.Сотрудник = ВТ_ПериодыДляСвязи.Сотрудник
	 |			И ВТ_Периоды.Период < ВТ_ПериодыДляСвязи.Период
	 |ГДЕ
	 |	НЕ ВТ_ПериодыДляСвязи.Период ЕСТЬ NULL И 
	 |  ВТ_Периоды.ПодразделениеОрганизации = &ПодразделениеОрганизации
	 | " + ФильтрСотрудникВТ + "
	 |СГРУППИРОВАТЬ ПО
	 |	ВТ_Периоды.Сотрудник,
	 |	ВТ_Периоды.Период,
	 |	ВТ_Периоды.Должность,
	 |	ВТ_Периоды.ПодразделениеОрганизации,
	 |	ВТ_Периоды.СтатьяФинансирования,
	 |	ВТ_Периоды.ГрафикРаботы
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	ВТ_Периоды.Сотрудник.Наименование,
	 |	Период";
	 
	Запрос.УстановитьПараметр("НачалоПериода",НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецПериода",КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации",ПодразделениеОрганизации);
	
	Если (Сотрудник <> неопределено)Тогда 
		Запрос.УстановитьПараметр("Сотрудник",Сотрудник);
	КонецЕсли;
	
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	
	
	Если (Сотрудник = неопределено)Тогда 
		РаботникиОрганизации.Очистить();	
	КонецЕсли;
	Результат = ложь;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = РаботникиОрганизации.Добавить();
		НоваяСтрока.Сотрудник     = Выборка.Сотрудник;
		НоваяСтрока.Должность     = Выборка.Должность;
		НоваяСтрока.ГрафикРаботы  = Выборка.ГрафикРаботы;
		НоваяСтрока.ДатаНачала	  = Выборка.Период;
		НоваяСтрока.СтатьяФинансирования	  = Выборка.СтатьяФинансирования;
		Если Выборка.ПериодСледующий = КонецМесяца(ПериодРегистрации) Тогда
			НоваяСтрока.ДатаОкончания = Выборка.ПериодСледующий;
		Иначе
			НоваяСтрока.ДатаОкончания = Выборка.ПериодСледующий-86400;
		КонецЕсли;	
		Если (Сотрудник <> неопределено)Тогда
			РассчитатьПоказатели(НоваяСтрока);
		КонецЕсли;
		Результат = истина;
	КонецЦикла;	
	Если (Сотрудник = неопределено)Тогда
		РассчитатьПоказатели(null);
	КонецЕсли;
	Возврат Результат;
КонецФункции

Процедура РассчитатьПоказатели(СтрокаРаботникиОрганизаций)
	
	//Если Вопрос("Перед расчетом документ требуется записать. Продолжить?", РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Нет Тогда
	//	 возврат;
	//КонецЕсли;	
	
	ЭтотОбъект.Записать();
	//Получим значения плановых показателей расчета
	
	//ВАЖНО:
	//При изменении показатей расчета или формул доплат требуется дописать запросы!!!
	//Показатели нумерованы:
	//1 - ПроцентЗаСложность
	//2 - ПроцентНочных
	
	МасПоказателей = новый Массив;
	ВыборкаНастройкаЗП = па_ОбщиеФункции.НастройкаРасчетаЗП(Дата, Организация);
	Если ВыборкаНастройкаЗП <> "" Тогда
		Если ВыборкаНастройкаЗП.Следующий() Тогда
			МасПоказателей.Добавить(ВыборкаНастройкаЗП.ПроцентЗаСложность);
			МасПоказателей.Добавить(ВыборкаНастройкаЗП.ПроцентНочных);
		КонецЕсли;	
	КонецЕсли;	
	
	ЗапросПлановыеПоказатели = новый запрос;
	ЗапросПлановыеПоказатели.Текст = 
	"ВЫБРАТЬ
	|	ПериодическиеЗначенияПоказателейСхемМотивацииСрезПоследних.Показатель,
	|	ПериодическиеЗначенияПоказателейСхемМотивацииСрезПоследних.Подразделение,
	|	ПериодическиеЗначенияПоказателейСхемМотивацииСрезПоследних.Значение,
	|	ВЫБОР
	|		КОГДА ПериодическиеЗначенияПоказателейСхемМотивацииСрезПоследних.Показатель = &ПроцентЗаСложность
	|			ТОГДА 1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПериодическиеЗначенияПоказателейСхемМотивацииСрезПоследних.Показатель = &ПроцентНочные
	|					ТОГДА 2
	|			КОНЕЦ
	|	КОНЕЦ КАК НомерПоказателя
	|ИЗ
	|	РегистрСведений.ПериодическиеЗначенияПоказателейСхемМотивации.СрезПоследних(
	|			&КонецПериода,
	|			Показатель В (&СпПоказателей)
	|				И Организация = &Организация
	|				И (Подразделение = &Подразделение
	|					ИЛИ Подразделение = &ПустаяСсылка)) КАК ПериодическиеЗначенияПоказателейСхемМотивацииСрезПоследних";
	
	
	ЗапросПлановыеПоказатели.УстановитьПараметр("СпПоказателей",МасПоказателей);
	ЗапросПлановыеПоказатели.УстановитьПараметр("Организация",Организация);
	ЗапросПлановыеПоказатели.УстановитьПараметр("ПустаяСсылка",Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	ЗапросПлановыеПоказатели.УстановитьПараметр("ПроцентЗаСложность",МасПоказателей[0]);
	ЗапросПлановыеПоказатели.УстановитьПараметр("ПроцентНочные",МасПоказателей[1]);
	ЗапросПлановыеПоказатели.УстановитьПараметр("КонецПериода",КонецМесяца(ПериодРегистрации));  
	ЗапросПлановыеПоказатели.УстановитьПараметр("Подразделение",ПодразделениеОрганизации);  
	Попытка
		Результат = ЗапросПлановыеПоказатели.Выполнить();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	ВыборкаПлановыеПоказатели = Результат.Выбрать();
	Пока ВыборкаПлановыеПоказатели.Следующий() Цикл
		Если ВыборкаПлановыеПоказатели.НомерПоказателя = 1 Тогда
			ПроцентЗаСложность = ВыборкаПлановыеПоказатели.Значение;
		ИначеЕсли ВыборкаПлановыеПоказатели.НомерПоказателя = 2 Тогда
			ПроцентНочных = ВыборкаПлановыеПоказатели.Значение;
		КонецЕсли;	
	КонецЦикла;	
	
	//Определим, являются ли часы по выбранному подразделению сложными или все по расширению обязанностей
	СпПодрСложность = па_ОбщиеФункции.СписокПодразделений(Организация, ,истина);
	СпПодрРасшОб = па_ОбщиеФункции.СписокПодразделений(Организация, , ,истина);
	Если СпПодрСложность.Найти(ПодразделениеОрганизации) <> неопределено Тогда
		ВсеЧасыСложные = истина;
	Иначе
		ВсеЧасыСложные = ложь;
	КонецЕсли;	
	Если СпПодрРасшОб.Найти(ПодразделениеОрганизации) <> неопределено Тогда
		ВсеЧасыЗаРасшОб = истина;
	Иначе
		ВсеЧасыЗаРасшОб = ложь;
	КонецЕсли;	
	
	//Выполним расчет показателей
	
	//ВНИМАНИЕ:
	//Запрос не работает с индивидуальными графиками работы!
	//Нормы всегда берутся по присвоенному сотруднику графику
	
	Запрос = новый запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	па_РасчетРазовыхНачисленийРаботникиОрганизации.Сотрудник,
	|	па_РасчетРазовыхНачисленийРаботникиОрганизации.Должность,
	|	ВЫБОР
	|		КОГДА па_РасчетРазовыхНачисленийРаботникиОрганизации.ГрафикРаботы.ГрафикПолногоРабочегоВремени = &ПустаяСсылка
	|			ТОГДА па_РасчетРазовыхНачисленийРаботникиОрганизации.ГрафикРаботы
	|		ИНАЧЕ па_РасчетРазовыхНачисленийРаботникиОрганизации.ГрафикРаботы.ГрафикПолногоРабочегоВремени
	|	КОНЕЦ КАК ГрафикРаботы,
	|	па_РасчетРазовыхНачисленийРаботникиОрганизации.ДатаОкончания,
	|	МАКСИМУМ(а_ОкладыКвалификационныхУровней.Период) КАК Период,
	|	па_РасчетРазовыхНачисленийРаботникиОрганизации.Ссылка.ПодразделениеОрганизации,
	|	па_РасчетРазовыхНачисленийРаботникиОрганизации.ДатаНачала,
	|	па_РасчетРазовыхНачисленийРаботникиОрганизации.СтатьяФинансирования
	|	,па_РасчетРазовыхНачисленийРаботникиОрганизации.РезультатСложность
	|	,па_РасчетРазовыхНачисленийРаботникиОрганизации.ЧасовНочных
	|	,па_РасчетРазовыхНачисленийРаботникиОрганизации.РезультатНочные
	|	,па_РасчетРазовыхНачисленийРаботникиОрганизации.ПроцентЗаИнтенсивность
	|	,па_РасчетРазовыхНачисленийРаботникиОрганизации.РезультатИнтенсивность
	|	,па_РасчетРазовыхНачисленийРаботникиОрганизации.ПроцентПоИндКоэф
	|	,па_РасчетРазовыхНачисленийРаботникиОрганизации.РезультатИндКоэф
	|	,па_РасчетРазовыхНачисленийРаботникиОрганизации.ПроцентЗаПроценты
	|	,па_РасчетРазовыхНачисленийРаботникиОрганизации.РезультатПроценты
	|	,па_РасчетРазовыхНачисленийРаботникиОрганизации.ЧасовЗаДежурство
	|	,па_РасчетРазовыхНачисленийРаботникиОрганизации.ПроцентЗаДежурство
	|	,па_РасчетРазовыхНачисленийРаботникиОрганизации.РезультатДежурство
	|	,па_РасчетРазовыхНачисленийРаботникиОрганизации.ЧасовЗаПраздничные
	|	,па_РасчетРазовыхНачисленийРаботникиОрганизации.РезультатПраздничные
	|	,па_РасчетРазовыхНачисленийРаботникиОрганизации.ЧасовЗаСложность
	|	,па_РасчетРазовыхНачисленийРаботникиОрганизации.НомерСтроки
	|ПОМЕСТИТЬ ВТ_Периоды
	|ИЗ
	|	Документ.па_РасчетРазовыхНачислений.РаботникиОрганизации КАК па_РасчетРазовыхНачисленийРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.а_ОкладыКвалификационныхУровней КАК а_ОкладыКвалификационныхУровней
	|		ПО па_РасчетРазовыхНачисленийРаботникиОрганизации.Ссылка.ПодразделениеОрганизации = а_ОкладыКвалификационныхУровней.Подразделение
	|			И па_РасчетРазовыхНачисленийРаботникиОрганизации.Должность = а_ОкладыКвалификационныхУровней.Должность
	|			И па_РасчетРазовыхНачисленийРаботникиОрганизации.ДатаОкончания >= а_ОкладыКвалификационныхУровней.Период
	|ГДЕ
	|	па_РасчетРазовыхНачисленийРаботникиОрганизации.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	па_РасчетРазовыхНачисленийРаботникиОрганизации.Сотрудник,
	|	па_РасчетРазовыхНачисленийРаботникиОрганизации.Должность,
	|	па_РасчетРазовыхНачисленийРаботникиОрганизации.ГрафикРаботы,
	|	па_РасчетРазовыхНачисленийРаботникиОрганизации.ДатаОкончания,
	|	па_РасчетРазовыхНачисленийРаботникиОрганизации.Ссылка.ПодразделениеОрганизации,
	|	па_РасчетРазовыхНачисленийРаботникиОрганизации.ДатаНачала,
	|	па_РасчетРазовыхНачисленийРаботникиОрганизации.СтатьяФинансирования
	|	,па_РасчетРазовыхНачисленийРаботникиОрганизации.РезультатСложность
	|	,па_РасчетРазовыхНачисленийРаботникиОрганизации.ЧасовНочных
	|	,па_РасчетРазовыхНачисленийРаботникиОрганизации.РезультатНочные
	|	,па_РасчетРазовыхНачисленийРаботникиОрганизации.ПроцентЗаИнтенсивность
	|	,па_РасчетРазовыхНачисленийРаботникиОрганизации.РезультатИнтенсивность
	|	,па_РасчетРазовыхНачисленийРаботникиОрганизации.ПроцентПоИндКоэф
	|	,па_РасчетРазовыхНачисленийРаботникиОрганизации.РезультатИндКоэф
	|	,па_РасчетРазовыхНачисленийРаботникиОрганизации.ПроцентЗаПроценты
	|	,па_РасчетРазовыхНачисленийРаботникиОрганизации.РезультатПроценты
	|	,па_РасчетРазовыхНачисленийРаботникиОрганизации.ЧасовЗаДежурство
	|	,па_РасчетРазовыхНачисленийРаботникиОрганизации.ПроцентЗаДежурство
	|	,па_РасчетРазовыхНачисленийРаботникиОрганизации.РезультатДежурство
	|	,па_РасчетРазовыхНачисленийРаботникиОрганизации.ЧасовЗаПраздничные
	|	,па_РасчетРазовыхНачисленийРаботникиОрганизации.РезультатПраздничные
	|	,па_РасчетРазовыхНачисленийРаботникиОрганизации.ЧасовЗаСложность
	|	,па_РасчетРазовыхНачисленийРаботникиОрганизации.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Периоды.Сотрудник,
	|	ВТ_Периоды.Должность,
	|	ВТ_Периоды.ГрафикРаботы,
	|	ВТ_Периоды.ДатаОкончания,
	|	а_ОкладыКвалификационныхУровней.Оклад,
	|	ВТ_Периоды.ДатаНачала,
	|	ВТ_Периоды.СтатьяФинансирования,
	|	ВТ_Периоды.РезультатСложность,
	|	ВТ_Периоды.ЧасовНочных,
	|	ВТ_Периоды.РезультатНочные,
	|	ВТ_Периоды.ПроцентЗаИнтенсивность,
	|	ВТ_Периоды.РезультатИнтенсивность,
	|	ВТ_Периоды.ПроцентПоИндКоэф,
	|	ВТ_Периоды.РезультатИндКоэф,
	|	ВТ_Периоды.ПроцентЗаПроценты,
	|	ВТ_Периоды.РезультатПроценты,
	|	ВТ_Периоды.ЧасовЗаДежурство,
	|	ВТ_Периоды.ПроцентЗаДежурство,
	|	ВТ_Периоды.РезультатДежурство,
	|	ВТ_Периоды.ЧасовЗаПраздничные,
	|	ВТ_Периоды.РезультатПраздничные,
	|	ВТ_Периоды.ЧасовЗаСложность,
	|	ВТ_Периоды.НомерСтроки
	|ПОМЕСТИТЬ ВТ_Оклады
	|ИЗ
	|	ВТ_Периоды КАК ВТ_Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.а_ОкладыКвалификационныхУровней КАК а_ОкладыКвалификационныхУровней
	|		ПО ВТ_Периоды.Должность = а_ОкладыКвалификационныхУровней.Должность
	|			И ВТ_Периоды.ПодразделениеОрганизации = а_ОкладыКвалификационныхУровней.Подразделение
	|			И ВТ_Периоды.Период = а_ОкладыКвалификационныхУровней.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Оклады.ГрафикРаботы
	|ПОМЕСТИТЬ ВТ_Графики
	|ИЗ
	|	ВТ_Оклады КАК ВТ_Оклады
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Оклады.ГрафикРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Графики.ГрафикРаботы,
	|	СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение) КАК НормаЧасовЗаМесяц
	|ПОМЕСТИТЬ ВТ_ГрафикНорма
	|ИЗ
	|	ВТ_Графики КАК ВТ_Графики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО ВТ_Графики.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.Месяц = &НачалоПериода
	|	И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = &ПоЧасам
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Графики.ГрафикРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Оклады.Сотрудник,
	|	ВТ_Оклады.Должность,
	|	ВТ_Оклады.ГрафикРаботы,
	|	ВТ_Оклады.ДатаОкончания,
	|	ВТ_Оклады.Оклад КАК Оклад,
	|	ВТ_Оклады.ДатаНачала,
	|	ВТ_Оклады.СтатьяФинансирования,
	|	ВТ_Оклады.РезультатСложность,
	|	ВТ_Оклады.ЧасовНочных,
	|	ВТ_Оклады.РезультатНочные,
	|	ВТ_Оклады.ПроцентЗаИнтенсивность,
	|	ВТ_Оклады.РезультатИнтенсивность,
	|	ВТ_Оклады.ПроцентПоИндКоэф,
	|	ВТ_Оклады.РезультатИндКоэф,
	|	ВТ_Оклады.ПроцентЗаПроценты,
	|	ВТ_Оклады.РезультатПроценты,
	|	ВТ_Оклады.ЧасовЗаДежурство,
	|	ВТ_Оклады.ПроцентЗаДежурство,
	|	ВТ_Оклады.РезультатДежурство,
	|	ВТ_Оклады.ЧасовЗаПраздничные,
	|	ВТ_Оклады.РезультатПраздничные,
	|	ВТ_Оклады.ЧасовЗаСложность,
	|	ВТ_Оклады.НомерСтроки КАК НомерСтроки,
	|	ВТ_ГрафикНорма.НормаЧасовЗаМесяц КАК НормаЧасовЗаМесяц
	|ПОМЕСТИТЬ ВТ_ОкладыНормы
	|ИЗ
	|	ВТ_Оклады КАК ВТ_Оклады
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГрафикНорма КАК ВТ_ГрафикНорма
	|		ПО ВТ_Оклады.ГрафикРаботы = ВТ_ГрафикНорма.ГрафикРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОкладыНормы.Сотрудник,
	|	ВТ_ОкладыНормы.Должность,
	|	ВТ_ОкладыНормы.ГрафикРаботы,
	|	ВТ_ОкладыНормы.ДатаОкончания,
	|	ВТ_ОкладыНормы.РезультатСложность,
	|	ВТ_ОкладыНормы.ЧасовНочных,
	|	ВТ_ОкладыНормы.РезультатНочные,
	|	ВТ_ОкладыНормы.ПроцентЗаИнтенсивность,
	|	ВТ_ОкладыНормы.РезультатИнтенсивность,
	|	ВТ_ОкладыНормы.ПроцентПоИндКоэф,
	|	ВТ_ОкладыНормы.РезультатИндКоэф,
	|	ВТ_ОкладыНормы.ПроцентЗаПроценты,
	|	ВТ_ОкладыНормы.РезультатПроценты,
	|	ВТ_ОкладыНормы.ЧасовЗаДежурство,
	|	ВТ_ОкладыНормы.ПроцентЗаДежурство,
	|	ВТ_ОкладыНормы.РезультатДежурство,
	|	ВТ_ОкладыНормы.ЧасовЗаПраздничные,
	|	ВТ_ОкладыНормы.РезультатПраздничные,
	|	ВТ_ОкладыНормы.ЧасовЗаСложность,
	|	МАКСИМУМ(ВТ_ОкладыНормы.Оклад) КАК Оклад,
	|	ВТ_ОкладыНормы.ДатаНачала,
	|	ВТ_ОкладыНормы.СтатьяФинансирования,
	|	МАКСИМУМ(ВТ_ОкладыНормы.НомерСтроки) КАК НомерСтроки,
	|	МАКСИМУМ(ВТ_ОкладыНормы.НормаЧасовЗаМесяц) КАК НормаЧасовПоГрафику,
	|	СУММА(РабочееВремяРаботниковОрганизацийОбороты.ЧасовОборот) КАК ЧасовПоТабелю,
	|	РабочееВремяРаботниковОрганизацийОбороты.Регистратор.ПодразделениеОрганизации КАК ПодразделениеОрганизации
	|ИЗ
	|	ВТ_ОкладыНормы КАК ВТ_ОкладыНормы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				Регистратор,
	|				Организация = &Организация
	|					И ВидИспользованияРабочегоВремени = &ДниЯвок) КАК РабочееВремяРаботниковОрганизацийОбороты
	|		ПО ВТ_ОкладыНормы.Сотрудник = РабочееВремяРаботниковОрганизацийОбороты.Сотрудник
	|			И ВТ_ОкладыНормы.ДатаНачала <= РабочееВремяРаботниковОрганизацийОбороты.Период
	|			И ВТ_ОкладыНормы.ДатаОкончания >= РабочееВремяРаботниковОрганизацийОбороты.Период
	|";
   	Если (СтрокаРаботникиОрганизаций <> null) Тогда
		Запрос.Текст = 	Запрос.Текст + "
		//| ГДЕ  ВТ_ОкладыНормы.Сотрудник = &Сотрудник И ВТ_ОкладыНормы.Должность = &Должность";
		 | ГДЕ ВТ_ОкладыНормы.НомерСтроки = &НомерСтроки";
	КонецЕсли;	
	Запрос.Текст = 	Запрос.Текст + "
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОкладыНормы.ДатаНачала,
	|	ВТ_ОкладыНормы.ДатаОкончания,
	|	РабочееВремяРаботниковОрганизацийОбороты.Регистратор.ПодразделениеОрганизации,
	|	ВТ_ОкладыНормы.Сотрудник,
	|	ВТ_ОкладыНормы.Должность,
	|	ВТ_ОкладыНормы.СтатьяФинансирования,
	|	ВТ_ОкладыНормы.РезультатСложность,
	|	ВТ_ОкладыНормы.ЧасовНочных,
	|	ВТ_ОкладыНормы.РезультатНочные,
	|	ВТ_ОкладыНормы.ПроцентЗаИнтенсивность,
	|	ВТ_ОкладыНормы.РезультатИнтенсивность,
	|	ВТ_ОкладыНормы.ПроцентПоИндКоэф,
	|	ВТ_ОкладыНормы.РезультатИндКоэф,
	|	ВТ_ОкладыНормы.ПроцентЗаПроценты,
	|	ВТ_ОкладыНормы.РезультатПроценты,
	|	ВТ_ОкладыНормы.ЧасовЗаДежурство,
	|	ВТ_ОкладыНормы.ПроцентЗаДежурство,
	|	ВТ_ОкладыНормы.РезультатДежурство,
	|	ВТ_ОкладыНормы.ЧасовЗаПраздничные,
	|	ВТ_ОкладыНормы.РезультатПраздничные,
	|	ВТ_ОкладыНормы.ЧасовЗаСложность,
	|	ВТ_ОкладыНормы.ГрафикРаботы
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Запрос.УстановитьПараметр("Ссылка",Ссылка);  
	Запрос.УстановитьПараметр("Организация",Организация);  
	Запрос.УстановитьПараметр("НачалоПериода",НачалоМесяца(ПериодРегистрации));  
	Запрос.УстановитьПараметр("КонецПериода",КонецМесяца(ПериодРегистрации));  
	Запрос.УстановитьПараметр("ПоЧасам",Перечисления.ВидыУчетаВремени.ПоЧасам);  
	Запрос.УстановитьПараметр("ДниЯвок",Справочники.КлассификаторИспользованияРабочегоВремени.Работа);  
	Запрос.УстановитьПараметр("ПустаяСсылка",Справочники.ГрафикиРаботы.ПустаяСсылка());  
	Если (СтрокаРаботникиОрганизаций <> null) Тогда
	  //Запрос.УстановитьПараметр("Сотрудник",СтрокаРаботникиОрганизаций.Сотрудник);  
	  //Запрос.УстановитьПараметр("Должность",СтрокаРаботникиОрганизаций.Должность);  
	  Запрос.УстановитьПараметр("НомерСтроки",СтрокаРаботникиОрганизаций.НомерСтроки);  
	КонецЕсли;	
	Попытка
		Результат = Запрос.Выполнить();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	
	Если (СтрокаРаботникиОрганизаций = null) Тогда
    	РаботникиОрганизации.Очистить();
	КонецЕсли;
	ОчиститьСообщения();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
    	Если (СтрокаРаботникиОрганизаций = null) Тогда
		    НоваяСтрока = РаботникиОрганизации.Добавить();
	    Иначе  
		    НоваяСтрока = СтрокаРаботникиОрганизаций;
		КонецЕсли;  
		НоваяСтрока.Сотрудник			= Выборка.Сотрудник;
		НоваяСтрока.Должность			= Выборка.Должность;
		НоваяСтрока.ГрафикРаботы		= Выборка.ГрафикРаботы;
		НоваяСтрока.ДатаНачала			= Выборка.ДатаНачала;
		НоваяСтрока.ДатаОкончания		= Выборка.ДатаОкончания;
		НоваяСтрока.Оклад			    = Выборка.Оклад;
		НоваяСтрока.НормаЧасовПоГрафику = Выборка.НормаЧасовПоГрафику;
		
		//Просто переписываемые данные
		НоваяСтрока.РезультатСложность      = Выборка.РезультатСложность;
		НоваяСтрока.ЧасовНочных             = Выборка.ЧасовНочных;
		НоваяСтрока.РезультатНочные         = Выборка.РезультатНочные;        
		НоваяСтрока.ПроцентЗаИнтенсивность  = Выборка.ПроцентЗаИнтенсивность; 
		НоваяСтрока.РезультатИнтенсивность  = Выборка.РезультатИнтенсивность; 
		НоваяСтрока.ПроцентПоИндКоэф        = Выборка.ПроцентПоИндКоэф;       
		НоваяСтрока.РезультатИндКоэф        = Выборка.РезультатИндКоэф;       
		НоваяСтрока.ПроцентЗаПроценты       = Выборка.ПроцентЗаПроценты;      
		НоваяСтрока.РезультатПроценты       = Выборка.РезультатПроценты;      
		НоваяСтрока.ЧасовЗаДежурство        = Выборка.ЧасовЗаДежурство;       
		НоваяСтрока.ПроцентЗаДежурство      = Выборка.ПроцентЗаДежурство;     
		НоваяСтрока.РезультатДежурство      = Выборка.РезультатДежурство;     
		НоваяСтрока.ЧасовЗаПраздничные      = Выборка.ЧасовЗаПраздничные;     
		НоваяСтрока.РезультатПраздничные    = Выборка.РезультатПраздничные;   
		НоваяСтрока.ЧасовЗаСложность    	= Выборка.ЧасовЗаСложность;   
		
		НоваяСтрока.СтатьяФинансирования = Выборка.СтатьяФинансирования;
		//Если верно введены табели, то за выбранный период (из ТЧ) подразделение должно совпасть с шапкой
		//Иначе ошибка ввода табеля
		Если Выборка.ПодразделениеОрганизации <> ПодразделениеОрганизации Тогда
			Сообщить(Выборка.Сотрудник.Наименование+" - За выбранный период табель отсутствует или введен на другое подразделение или нет часов явок !");
		КонецЕсли;
		НоваяСтрока.ЧасовПоТабелю 		= Выборка.ЧасовПоТабелю;
		
		НоваяСтрока.ПроцентЗаСложность 	= ПроцентЗаСложность;
		НоваяСтрока.ПроцентНочных 		= ПроцентНочных;
		
		Если ВсеЧасыСложные Тогда
			НоваяСтрока.ЧасовЗаСложность = Выборка.ЧасовПоТабелю;
		КонецЕсли;	
		Если ВсеЧасыЗаРасшОб Тогда
			 НоваяСтрока.ЧасовЗаПроценты = Выборка.ЧасовПоТабелю;
		КонецЕсли;	
		НоваяСтрока.ЧасовЗаИнтенсивность = Выборка.ЧасовПоТабелю;
		НоваяСтрока.ЧасовПоИндКоэф = Выборка.ЧасовПоТабелю;
		НоваяСтрока.ЧасовЗаПроценты = Выборка.ЧасовПоТабелю;
	КонецЦикла;	
		
КонецПроцедуры

Процедура ДействияФормыЗаполнить(Кнопка)
	ЗаполнитьДанныеПоСотрудникам(неопределено);
КонецПроцедуры

Процедура КоманднаяПанельРаботникиРассчитатьПоказатели(Кнопка)
	РассчитатьПоказатели(null);
КонецПроцедуры

Процедура КоманднаяПанельРаботникиРассчитатьПоказателиТекущегоСотрудника(Кнопка)
	ДанныеСтроки = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
	Если (ДанныеСтроки = неопределено) Тогда
		Предупреждение("Не выбрана строка табличной части.");
	Иначе
    	РассчитатьПоказатели(ДанныеСтроки);
	КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанельРаботникиРассчитатьДоплаты(Кнопка)
	РассчитатьДоплаты(null);
КонецПроцедуры
	
Процедура РассчитатьДоплаты(СтрокаРаботникиОрганизаций)
	//Если Вопрос("Перед расчетом документ требуется записать. Продолжить?", РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Нет Тогда
	//	 возврат;
	//КонецЕсли;	
	
	Если (СтрокаРаботникиОрганизаций <> null) Тогда  //расчет по текущему сотруднику
		
		СтрокаРаботникиОрганизаций.РезультатСложность = СтрокаРаботникиОрганизаций.Оклад/СтрокаРаботникиОрганизаций.НормаЧасовПоГрафику*СтрокаРаботникиОрганизаций.ЧасовЗаСложность*СтрокаРаботникиОрганизаций.ПроцентЗаСложность/100;
		СтрокаРаботникиОрганизаций.РезультатНочные = СтрокаРаботникиОрганизаций.Оклад/СтрокаРаботникиОрганизаций.НормаЧасовПоГрафику*СтрокаРаботникиОрганизаций.ЧасовНочных*СтрокаРаботникиОрганизаций.ПроцентНочных/100;
		СтрокаРаботникиОрганизаций.РезультатИнтенсивность = СтрокаРаботникиОрганизаций.Оклад/СтрокаРаботникиОрганизаций.НормаЧасовПоГрафику*СтрокаРаботникиОрганизаций.ЧасовЗаИнтенсивность*СтрокаРаботникиОрганизаций.ПроцентЗаИнтенсивность/100;
		СтрокаРаботникиОрганизаций.РезультатИндКоэф = СтрокаРаботникиОрганизаций.Оклад/СтрокаРаботникиОрганизаций.НормаЧасовПоГрафику*СтрокаРаботникиОрганизаций.ЧасовПоИндКоэф*СтрокаРаботникиОрганизаций.ПроцентПоИндКоэф/100;
		СтрокаРаботникиОрганизаций.РезультатПроценты = СтрокаРаботникиОрганизаций.Оклад/СтрокаРаботникиОрганизаций.НормаЧасовПоГрафику*СтрокаРаботникиОрганизаций.ЧасовЗаПроценты*СтрокаРаботникиОрганизаций.ПроцентЗаПроценты/100;
		СтрокаРаботникиОрганизаций.РезультатДежурство = СтрокаРаботникиОрганизаций.Оклад/СтрокаРаботникиОрганизаций.НормаЧасовПоГрафику*СтрокаРаботникиОрганизаций.ЧасовЗаДежурство*СтрокаРаботникиОрганизаций.ПроцентЗаДежурство/100;
		СтрокаРаботникиОрганизаций.РезультатПраздничные = СтрокаРаботникиОрганизаций.Оклад/СтрокаРаботникиОрганизаций.НормаЧасовПоГрафику*СтрокаРаботникиОрганизаций.ЧасовЗаПраздничные;
		
	Иначе   // расчет по всем сотрудникам
		
	ЭтотОбъект.Записать();
	
	Запрос = новый запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	па_РасчетРазовыхНачисленийРаботникиОрганизации.Сотрудник,
	|	па_РасчетРазовыхНачисленийРаботникиОрганизации.Должность,
	|	па_РасчетРазовыхНачисленийРаботникиОрганизации.ГрафикРаботы,
	|	па_РасчетРазовыхНачисленийРаботникиОрганизации.ДатаНачала,
	|	па_РасчетРазовыхНачисленийРаботникиОрганизации.ДатаОкончания,
	|	па_РасчетРазовыхНачисленийРаботникиОрганизации.Оклад,
	|	па_РасчетРазовыхНачисленийРаботникиОрганизации.НормаЧасовПоГрафику,
	|	па_РасчетРазовыхНачисленийРаботникиОрганизации.ЧасовПоТабелю,
	|	па_РасчетРазовыхНачисленийРаботникиОрганизации.ЧасовЗаСложность,
	|	па_РасчетРазовыхНачисленийРаботникиОрганизации.ПроцентЗаСложность,
	|	па_РасчетРазовыхНачисленийРаботникиОрганизации.ЧасовНочных,
	|	па_РасчетРазовыхНачисленийРаботникиОрганизации.ПроцентНочных,
	|	па_РасчетРазовыхНачисленийРаботникиОрганизации.ЧасовЗаИнтенсивность,
	|	па_РасчетРазовыхНачисленийРаботникиОрганизации.ПроцентЗаИнтенсивность,
	|	па_РасчетРазовыхНачисленийРаботникиОрганизации.ЧасовПоИндКоэф,
	|	па_РасчетРазовыхНачисленийРаботникиОрганизации.ПроцентПоИндКоэф,
	|	па_РасчетРазовыхНачисленийРаботникиОрганизации.ЧасовЗаПроценты,
	|	па_РасчетРазовыхНачисленийРаботникиОрганизации.ПроцентЗаПроценты,
	|	па_РасчетРазовыхНачисленийРаботникиОрганизации.ЧасовЗаДежурство,
	|	па_РасчетРазовыхНачисленийРаботникиОрганизации.ПроцентЗаДежурство,
	|	па_РасчетРазовыхНачисленийРаботникиОрганизации.ЧасовЗаПраздничные,
	|	па_РасчетРазовыхНачисленийРаботникиОрганизации.СтатьяФинансирования,
	|	ВЫБОР
	|		КОГДА па_РасчетРазовыхНачисленийРаботникиОрганизации.НормаЧасовПоГрафику <> 0
	|			ТОГДА ВЫРАЗИТЬ(па_РасчетРазовыхНачисленийРаботникиОрганизации.Оклад / па_РасчетРазовыхНачисленийРаботникиОрганизации.НормаЧасовПоГрафику * па_РасчетРазовыхНачисленийРаботникиОрганизации.ЧасовЗаСложность * па_РасчетРазовыхНачисленийРаботникиОрганизации.ПроцентЗаСложность / 100 КАК ЧИСЛО(10, 2))
	|	КОНЕЦ КАК РезультатСложность,
	|	па_РасчетРазовыхНачисленийРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА па_РасчетРазовыхНачисленийРаботникиОрганизации.НормаЧасовПоГрафику <> 0
	|			ТОГДА ВЫРАЗИТЬ(па_РасчетРазовыхНачисленийРаботникиОрганизации.Оклад / па_РасчетРазовыхНачисленийРаботникиОрганизации.НормаЧасовПоГрафику * па_РасчетРазовыхНачисленийРаботникиОрганизации.ЧасовНочных * па_РасчетРазовыхНачисленийРаботникиОрганизации.ПроцентНочных / 100 КАК ЧИСЛО(10, 2))
	|	КОНЕЦ КАК РезультатНочные,
	|	ВЫБОР
	|		КОГДА па_РасчетРазовыхНачисленийРаботникиОрганизации.НормаЧасовПоГрафику <> 0
	|			ТОГДА ВЫРАЗИТЬ(па_РасчетРазовыхНачисленийРаботникиОрганизации.Оклад / па_РасчетРазовыхНачисленийРаботникиОрганизации.НормаЧасовПоГрафику * па_РасчетРазовыхНачисленийРаботникиОрганизации.ЧасовЗаИнтенсивность * па_РасчетРазовыхНачисленийРаботникиОрганизации.ПроцентЗаИнтенсивность / 100 КАК ЧИСЛО(10, 2))
	|	КОНЕЦ КАК РезультатИнтенсивность,
	|	ВЫБОР
	|		КОГДА па_РасчетРазовыхНачисленийРаботникиОрганизации.НормаЧасовПоГрафику <> 0
	|			ТОГДА ВЫРАЗИТЬ(па_РасчетРазовыхНачисленийРаботникиОрганизации.Оклад / па_РасчетРазовыхНачисленийРаботникиОрганизации.НормаЧасовПоГрафику * па_РасчетРазовыхНачисленийРаботникиОрганизации.ЧасовПоИндКоэф * па_РасчетРазовыхНачисленийРаботникиОрганизации.ПроцентПоИндКоэф / 100 КАК ЧИСЛО(10, 2))
	|	КОНЕЦ КАК РезультатИндКоэф,
	|	ВЫБОР
	|		КОГДА па_РасчетРазовыхНачисленийРаботникиОрганизации.НормаЧасовПоГрафику <> 0
	|			ТОГДА ВЫРАЗИТЬ(па_РасчетРазовыхНачисленийРаботникиОрганизации.Оклад / па_РасчетРазовыхНачисленийРаботникиОрганизации.НормаЧасовПоГрафику * па_РасчетРазовыхНачисленийРаботникиОрганизации.ЧасовЗаПроценты * па_РасчетРазовыхНачисленийРаботникиОрганизации.ПроцентЗаПроценты / 100 КАК ЧИСЛО(10, 2))
	|	КОНЕЦ КАК РезультатПроценты,
	|	ВЫБОР
	|		КОГДА па_РасчетРазовыхНачисленийРаботникиОрганизации.НормаЧасовПоГрафику <> 0
	|			ТОГДА ВЫРАЗИТЬ(па_РасчетРазовыхНачисленийРаботникиОрганизации.Оклад / па_РасчетРазовыхНачисленийРаботникиОрганизации.НормаЧасовПоГрафику * па_РасчетРазовыхНачисленийРаботникиОрганизации.ЧасовЗаДежурство * па_РасчетРазовыхНачисленийРаботникиОрганизации.ПроцентЗаДежурство / 100 КАК ЧИСЛО(10, 2))
	|	КОНЕЦ КАК РезультатДежурство,
	|	ВЫБОР
	|		КОГДА па_РасчетРазовыхНачисленийРаботникиОрганизации.НормаЧасовПоГрафику <> 0
	|			ТОГДА ВЫРАЗИТЬ(па_РасчетРазовыхНачисленийРаботникиОрганизации.Оклад / па_РасчетРазовыхНачисленийРаботникиОрганизации.НормаЧасовПоГрафику * па_РасчетРазовыхНачисленийРаботникиОрганизации.ЧасовЗаПраздничные КАК ЧИСЛО(10, 2))
	|	КОНЕЦ КАК РезультатПраздничные
	|ИЗ
	|	Документ.па_РасчетРазовыхНачислений.РаботникиОрганизации КАК па_РасчетРазовыхНачисленийРаботникиОрганизации
	|ГДЕ
	|	па_РасчетРазовыхНачисленийРаботникиОрганизации.Ссылка = &Ссылка
	//|";
	//   Если (СтрокаРаботникиОрганизаций <> null) Тогда
	//	Запрос.Текст = 	Запрос.Текст + "
	//	//| И  па_РасчетРазовыхНачисленийРаботникиОрганизации.Сотрудник = &Сотрудник И па_РасчетРазовыхНачисленийРаботникиОрганизации.Должность = &Должность";
	//КонецЕсли;	
	//Запрос.Текст = 	Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);  
	//Если (СтрокаРаботникиОрганизаций <> null) Тогда
	//  Запрос.УстановитьПараметр("Сотрудник",СтрокаРаботникиОрганизаций.Сотрудник);  
	//  Запрос.УстановитьПараметр("Должность",СтрокаРаботникиОрганизаций.Должность);  
	//КонецЕсли;	
	
	Попытка
		Результат = Запрос.Выполнить();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	
	
	//Если (СтрокаРаботникиОрганизаций <> null) Тогда
	//	Выборка = Результат.Выбрать();
	//	Выборка.Следующий();
	//	ЗаполнитьЗначенияСвойств(СтрокаРаботникиОрганизаций, Выборка);
	//Иначе
		РаботникиОрганизации.Очистить();
		ТЗ = Результат.Выгрузить();
		РаботникиОрганизации.Загрузить(ТЗ);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельРаботникиРассчитатьДоплатыТекущегоСотрудника(Кнопка)
	ДанныеСтроки = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
	Если (ДанныеСтроки = неопределено) Тогда
		Предупреждение("Не выбрана строка табличной части.");
	Иначе
    	РассчитатьДоплаты(ДанныеСтроки);
	КонецЕсли;
КонецПроцедуры

Процедура ПриИзмененииПериодаРегистрации(Элемент)
		
		Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
		
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииПриИзменении(Элемент)
	
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, ПериодРегистрации);
	ПриИзмененииПериодаРегистрации(Элемент)	
	
КонецПроцедуры // ПериодРегистрацииПриИзменении()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма);
	
	ПриИзмененииПериодаРегистрации(Элемент);
	
КонецПроцедуры // ПериодРегистрацииНачалоВыбораИзСписка()

// Процедура - обработчик события "Очистка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПериодРегистрацииОчистка()

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ПериодРегистрации = ДобавитьМесяц(ПериодРегистрации, Направление);
	ПриИзмененииПериодаРегистрации(Элемент);
	
КонецПроцедуры // ПериодРегистрацииРегулирование()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодРегистрацииАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодРегистрацииОкончаниеВводаТекста()

Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
		//Добавим ВидыРасчетов в ТЧ ДокументыИИсточники
		ВыборкаНастройкаЗП = па_ОбщиеФункции.НастройкаРасчетаЗП(Дата, Организация);
		Если ВыборкаНастройкаЗП.Следующий() Тогда
			НоваяСтрока = ДокументыИИсточники.Добавить();
			НоваяСтрока.ВидРасчета = ВыборкаНастройкаЗП.ДоплатаЗаСложность;
			НоваяСтрока.КОСГУ = Справочники.КОСГУ.КОСГУ211;
			НоваяСтрока.СтатьяРасходов = Справочники.СтатьиРасходов.НайтиПоНаименованию("Расходы учреждения по текущей деятельности");
			
			НоваяСтрока = ДокументыИИсточники.Добавить();
			НоваяСтрока.ВидРасчета = ВыборкаНастройкаЗП.ДоплатаЗаНочные;
			НоваяСтрока.КОСГУ = Справочники.КОСГУ.КОСГУ211;
			НоваяСтрока.СтатьяРасходов = Справочники.СтатьиРасходов.НайтиПоНаименованию("Расходы учреждения по текущей деятельности");
			
			НоваяСтрока = ДокументыИИсточники.Добавить();
			НоваяСтрока.ВидРасчета = ВыборкаНастройкаЗП.ДоплатаЗаИнтенсивность;
			НоваяСтрока.КОСГУ = Справочники.КОСГУ.КОСГУ211;
			НоваяСтрока.СтатьяРасходов = Справочники.СтатьиРасходов.НайтиПоНаименованию("Расходы учреждения по текущей деятельности");
			
			НоваяСтрока = ДокументыИИсточники.Добавить();
			НоваяСтрока.ВидРасчета = ВыборкаНастройкаЗП.ДоплатаПоИндКоэф;
			НоваяСтрока.КОСГУ = Справочники.КОСГУ.КОСГУ211;
			НоваяСтрока.СтатьяРасходов = Справочники.СтатьиРасходов.НайтиПоНаименованию("Расходы учреждения по текущей деятельности");
			
			НоваяСтрока = ДокументыИИсточники.Добавить();
			НоваяСтрока.ВидРасчета = ВыборкаНастройкаЗП.ДоплатаЗаПроценты;
			НоваяСтрока.КОСГУ = Справочники.КОСГУ.КОСГУ211;
			НоваяСтрока.СтатьяРасходов = Справочники.СтатьиРасходов.НайтиПоНаименованию("Расходы учреждения по текущей деятельности");
			
			//НоваяСтрока = ДокументыИИсточники.Добавить();
			//НоваяСтрока.ВидРасчета = ВыборкаНастройкаЗП.ДоплатаЗаДежурство;
			
			НоваяСтрока = ДокументыИИсточники.Добавить();
			НоваяСтрока.ВидРасчета = ВыборкаНастройкаЗП.ДоплатаЗаПраздничные;
			НоваяСтрока.КОСГУ = Справочники.КОСГУ.КОСГУ211;
			НоваяСтрока.СтатьяРасходов = Справочники.СтатьиРасходов.НайтиПоНаименованию("Расходы учреждения по текущей деятельности");
			
		КонецЕсли;	
	Иначе
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	// Заполним реквизит формы МесяцСтрока.
	МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	//Нижняя панель
	УстановитьВидимостьНижнейПанели(Ложь);
КонецПроцедуры

Процедура ДокументыИИсточникиПередНачаломДобавления(Элемент, Отказ, Копирование)
	Отказ = истина;
	возврат;
КонецПроцедуры

Процедура ДокументыИИсточникиПередУдалением(Элемент, Отказ)
	Отказ = истина;
	возврат;
КонецПроцедуры

Процедура КоманднаяПанельРаботникиПодбор(Кнопка)
	мГоловнаяОрганизация = ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация);
	СтандартнаяОбработка = неопределено;
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.РаботникиОрганизации, Ссылка, Ложь, Дата, мГоловнаяОрганизация, 5, СтандартнаяОбработка);
КонецПроцедуры

Процедура РаботникиОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		//Для того чтобы не было задвоений при выборе, наложим условие
		Строки = РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение));
		Если Строки.Количество() <> 0 Тогда
			Ответ = Вопрос("Найдены строки по заданным сотрудникам. Перезаполнить?", РежимДиалогаВопрос.ДаНетОтмена);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Для каждого строка из Строки Цикл
					РаботникиОрганизации.Удалить(Строка);
				КонецЦикла;
			ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
	              возврат;
			КонецЕсли;	
		КонецЕсли;
		Если НЕ ЗаполнитьДанныеПоСотрудникам(ВыбранноеЗначение) Тогда
			Предупреждение("Сотрудник не работает в данном подразделении!");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НадписьПереключательНижнейПанелиНажатие(Элемент)
	УстановитьВидимостьНижнейПанели(Не ПоказыватьНижнююПанель);
КонецПроцедуры

Процедура УстановитьВидимостьНижнейПанели(Показывать = Неопределено)
	ПоказыватьНижнююПанель = ?(ЗначениеЗаполнено(Показывать), Показывать, Ложь);
	ЭлементыФормы.НадписьПереключательНижнейПанели.Заголовок = ?(ПоказыватьНижнююПанель, "Скрыть", "Показать");
	Если ПоказыватьНижнююПанель Тогда
		Если ЭлементыФормы.ПанельНижняя.Свертка = РежимСверткиЭлементаУправления.Низ Тогда
			// развернем панель, привязки на форме остались правильные
			ЭлементыФормы.ПанельНижняя.Свертка = РежимСверткиЭлементаУправления.Нет;
			// перепривяжем ЭУ для работы с развернутой панелью
			ЭлементыФормы.Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Верх, Панель, ГраницаЭлементаУправления.Низ);
			ЭлементыФормы.ПанельЗаголовокНижнейПанели.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ЭлементыФормы.Разделитель, ГраницаЭлементаУправления.Низ);
			ЭлементыФормы.ПанельНижняя.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ЭлементыФормы.ПанельЗаголовокНижнейПанели, ГраницаЭлементаУправления.Низ);
		КонецЕсли;
	Иначе
		Если ЭлементыФормы.ПанельНижняя.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
			// перепривяжем ЭУ перед сверткой панели в низ
			ЭлементыФормы.ПанельНижняя.УстановитьПривязку(ГраницаЭлементаУправления.Верх);
			ЭлементыФормы.ПанельЗаголовокНижнейПанели.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ЭлементыФормы.ПанельНижняя, ГраницаЭлементаУправления.Верх);
			ЭлементыФормы.Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ЭлементыФормы.ПанельЗаголовокНижнейПанели, ГраницаЭлементаУправления.Верх);
			ЭлементыФормы.ПанельНижняя.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ЭлементыФормы.ПанельНижняя, ГраницаЭлементаУправления.Низ);
			ЭлементыФормы.ПанельНижняя.Свертка = РежимСверткиЭлементаУправления.Низ;
		КонецЕсли;
	КонецЕсли;
	
	//Разделитель.Доступность = ОтображатьПанель;
		
КонецПроцедуры

Процедура РаботникиОрганизацииЧасовПоТабелюПриИзменении(Элемент)
	ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока.ЧасовПоИндКоэф = Элемент.Значение; 
КонецПроцедуры

Процедура КоманднаяПанельРаботникиОбновитьСтатьиФинансирования(Кнопка)
	
	// Добавлена временно для перехода на новую редакцию формы со статьей финансирования
	// Поэтому просто переберем все строки ТЧ
	
	Для Каждого ТекСтрока Из РаботникиОрганизации Цикл
		
		Запрос = новый запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчетеСрезПоследних.СтатьяФинансирования
		|ИЗ
		|	РегистрСведений.УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете.СрезПоследних КАК УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчетеСрезПоследних
		|ГДЕ
		|	УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчетеСрезПоследних.Сотрудник = &Сотрудник";
		
		Запрос.УстановитьПараметр("Сотрудник", ТекСтрока.Сотрудник);
		
		Попытка
			РезультатЗапроса = Запрос.Выполнить();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;	
		
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			 ТекСтрока.СтатьяФинансирования = Выборка.СтатьяФинансирования;
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры



